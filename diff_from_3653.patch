Index: cosmo/src/test/unit/java/org/osaf/cosmo/service/impl/StandardUserServiceTest.java
===================================================================
--- cosmo/src/test/unit/java/org/osaf/cosmo/service/impl/StandardUserServiceTest.java	(revision 3653)
+++ cosmo/src/test/unit/java/org/osaf/cosmo/service/impl/StandardUserServiceTest.java	(working copy)
@@ -28,6 +28,7 @@
 import org.osaf.cosmo.dao.mock.MockContentDao;
 import org.osaf.cosmo.dao.mock.MockDaoStorage;
 import org.osaf.cosmo.dao.mock.MockUserDao;
+import org.osaf.cosmo.model.PasswordRecovery;
 import org.osaf.cosmo.model.User;
 import org.osaf.cosmo.service.account.AutomaticAccountActivator;
 
@@ -224,4 +225,60 @@
         // tests hex
         assertTrue("Digest not hex encoded", digested.matches("^[0-9a-f]+$"));
     }
+    
+    public void testCreatePasswordRecovery(){
+        User user = testHelper.makeDummyUser();
+        user = userDao.createUser(user);
+        
+        PasswordRecovery passwordRecovery = 
+            new PasswordRecovery(user, "pwrecovery1");
+        
+        passwordRecovery = service.createPasswordRecovery(passwordRecovery);
+
+        PasswordRecovery storedPasswordRecovery = 
+            service.getPasswordRecovery(passwordRecovery.getKey());
+
+        assertEquals(passwordRecovery, storedPasswordRecovery);
+        
+        service.deletePasswordRecovery(storedPasswordRecovery);
+        
+        storedPasswordRecovery = 
+            service.getPasswordRecovery(storedPasswordRecovery.getKey());
+        
+        assertNull(storedPasswordRecovery);
+    }
+    
+    public void testRecoverPassword(){
+        User user = testHelper.makeDummyUser();
+        
+        userDao.createUser(user);
+
+        PasswordRecovery passwordRecovery = new PasswordRecovery(user, "pwrecovery2");
+        
+        passwordRecovery = service.createPasswordRecovery(passwordRecovery);
+        
+        assertEquals(user, passwordRecovery.getUser());
+        
+        // Recover password
+        
+        PasswordRecovery storedPasswordRecovery = 
+            service.getPasswordRecovery(passwordRecovery.getKey());
+        
+        User changingUser = storedPasswordRecovery.getUser();
+        
+        String newPassword = service.generatePassword();
+
+        changingUser.setPassword(newPassword);
+        
+        changingUser = service.updateUser(changingUser);
+        
+        String changedPassword = changingUser.getPassword();
+        
+        User changedUser = service.getUser(changingUser.getUsername());
+        
+        assertEquals(changedUser, changingUser);
+        
+        assertEquals(changedPassword, changedUser.getPassword());
+       
+    }
 }
Index: cosmo/src/test/unit/java/org/osaf/cosmo/dao/hibernate/HibernateUserDaoTest.java
===================================================================
--- cosmo/src/test/unit/java/org/osaf/cosmo/dao/hibernate/HibernateUserDaoTest.java	(revision 3653)
+++ cosmo/src/test/unit/java/org/osaf/cosmo/dao/hibernate/HibernateUserDaoTest.java	(working copy)
@@ -25,6 +25,7 @@
 import org.hibernate.validator.InvalidStateException;
 import org.osaf.cosmo.model.DuplicateEmailException;
 import org.osaf.cosmo.model.DuplicateUsernameException;
+import org.osaf.cosmo.model.PasswordRecovery;
 import org.osaf.cosmo.model.User;
 import org.osaf.cosmo.util.PageCriteria;
 import org.osaf.cosmo.util.PagedList;
@@ -370,6 +371,39 @@
         Assert.assertNull(queryUser1);
     }
     
+    public void testCreatePasswordRecovery() throws Exception {
+        User user1 = new User();
+        user1.setUsername("user1");
+        user1.setFirstName("User");
+        user1.setLastName("1");
+        user1.setEmail("user1@user1.com");
+        user1.setPassword("user1password");
+        user1.setAdmin(Boolean.TRUE);
+
+        user1 = userDao.createUser(user1);
+        
+        PasswordRecovery passwordRecovery = new PasswordRecovery(user1, "1");
+        
+        userDao.createPasswordRecovery(passwordRecovery);
+        
+        String passwordRecoveryKey = passwordRecovery.getKey();
+        
+        clearSession();
+        
+        PasswordRecovery queryPasswordRecovery = 
+            userDao.getPasswordRecovery(passwordRecoveryKey);
+        
+        Assert.assertNotNull(queryPasswordRecovery);
+        Assert.assertEquals(passwordRecovery, queryPasswordRecovery);
+        
+        // Test delete
+        userDao.deletePasswordRecovery(queryPasswordRecovery);
+        queryPasswordRecovery = 
+            userDao.getPasswordRecovery(passwordRecoveryKey);
+        
+        Assert.assertNull(queryPasswordRecovery);
+    }
+    
     private void verifyUser(User user1, User user2) {
         Assert.assertEquals(user1.getUid(), user2.getUid());
         Assert.assertEquals(user1.getUsername(), user2.getUsername());
@@ -392,4 +426,5 @@
         Assert.fail("specified User doesn't exist in Set: "
                 + user.getUsername());
     }
+
 }
Index: cosmo/src/test/unit/java/org/osaf/cosmo/dao/mock/MockUserDao.java
===================================================================
--- cosmo/src/test/unit/java/org/osaf/cosmo/dao/mock/MockUserDao.java	(revision 3653)
+++ cosmo/src/test/unit/java/org/osaf/cosmo/dao/mock/MockUserDao.java	(working copy)
@@ -30,6 +30,7 @@
 import org.osaf.cosmo.dao.UserDao;
 import org.osaf.cosmo.model.DuplicateEmailException;
 import org.osaf.cosmo.model.DuplicateUsernameException;
+import org.osaf.cosmo.model.PasswordRecovery;
 import org.osaf.cosmo.model.User;
 import org.osaf.cosmo.util.PageCriteria;
 import org.osaf.cosmo.util.PagedList;
@@ -47,6 +48,7 @@
     private HashMap emailIdx;
     private HashMap uidIdx;
     private HashMap activationIdIdx;
+    private HashMap<String, PasswordRecovery> passwordRecoveryIdx;
 
     private VersionFourGenerator idGenerator = new VersionFourGenerator();
 
@@ -57,6 +59,7 @@
         emailIdx = new HashMap();
         uidIdx = new HashMap();
         activationIdIdx = new HashMap();
+        passwordRecoveryIdx = new HashMap<String, PasswordRecovery>();
 
         // add overlord user
         User overlord = new User();
@@ -222,4 +225,19 @@
      */
     public void destroy() {
     }
+
+    public void createPasswordRecovery(PasswordRecovery passwordRecovery) {
+        passwordRecoveryIdx.put(passwordRecovery.getKey(), passwordRecovery);
+        
+    }
+
+    public void deletePasswordRecovery(PasswordRecovery passwordRecovery) {
+        passwordRecoveryIdx.remove(passwordRecovery.getKey());
+        
+    }
+
+    public PasswordRecovery getPasswordRecovery(String key) {
+        return passwordRecoveryIdx.get(key);
+    }
+
 }
Index: cosmo/src/test/unit/resources/applicationContext-test.xml
===================================================================
--- cosmo/src/test/unit/resources/applicationContext-test.xml	(revision 3653)
+++ cosmo/src/test/unit/resources/applicationContext-test.xml	(working copy)
@@ -90,6 +90,7 @@
             <value>org.osaf.cosmo.model.Ticket</value>
             <value>org.osaf.cosmo.model.TimestampAttribute</value>
             <value>org.osaf.cosmo.model.User</value>
+            <value>org.osaf.cosmo.model.PasswordRecovery</value>
         </list>
     </property>
     <property name="entityInterceptor">
Index: cosmo/src/test/functional/windmill/admin.json
===================================================================
--- cosmo/src/test/functional/windmill/admin.json	(revision 3653)
+++ cosmo/src/test/functional/windmill/admin.json	(working copy)
@@ -0,0 +1,13 @@
+{"method": "click", "params": {"link" : "Log Out"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
+{"method": "type", "params": {"id" : "loginDialogUsernameInput", "text": "root"}}
+{"method": "type", "params": {"id" : "loginDialogPasswordInput", "text": "cosmo"}}
+{"method": "click", "params": {"id" : "loginSubmitButton"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "click", "params": {"link" : "Users"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "click", "params": {"id" : "testerRow"}}
+{"method": "click", "params": {"link" : "Delete Selected Users"}}
+{"method": "click", "params": {"link" : "Log Out"}}
\ No newline at end of file
Index: cosmo/src/test/functional/windmill/mini_cal.json
===================================================================
--- cosmo/src/test/functional/windmill/mini_cal.json	(revision 3653)
+++ cosmo/src/test/functional/windmill/mini_cal.json	(working copy)
@@ -0,0 +1,39 @@
+{"method": "click", "params": {"id" : "miniCal_month0_day3"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"id" : "miniCal_month0_day12"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"id" : "miniCal_month0_day23"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"id" : "miniCal_month0_day28"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"id" : "miniCal_month1_day3"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"id" : "miniCal_month1_day12"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"id" : "miniCal_month1_day23"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"id" : "miniCal_month1_day28"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"id" : "miniCal_month2_day3"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"id" : "miniCal_month2_day12"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"id" : "miniCal_month2_day23"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"id" : "miniCal_month2_day28"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "type", "params": {"id" : "jumpto", "text": "05/08/2002"}}
+{"method": "click", "params": {"id" : "cosmo_Button_2"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "verify", "params": {"id" : "monthHeaderDiv", "validator" : "2002"}}
+{"method": "type", "params": {"id" : "jumpto", "text": "03/10/2008"}}
+{"method": "click", "params": {"id" : "cosmo_Button_2"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "verify", "params": {"id" : "monthHeaderDiv", "validator" : "2008"}}
+{"method": "type", "params": {"id" : "jumpto", "text": "01/07/2018"}}
+{"method": "click", "params": {"id" : "cosmo_Button_2"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "verify", "params": {"id" : "monthHeaderDiv", "validator" : "2018"}}
+{"method": "type", "params": {"id" : "jumpto", "text": "07/17/2027"}}
+{"method": "click", "params": {"id" : "cosmo_Button_2"}}
+{"method": "verify", "params": {"id" : "monthHeaderDiv", "validator" : "2027"}}
Index: cosmo/src/test/functional/windmill/time_zones.json
===================================================================
--- cosmo/src/test/functional/windmill/time_zones.json	(revision 3653)
+++ cosmo/src/test/functional/windmill/time_zones.json	(working copy)
@@ -0,0 +1,53 @@
+{"method": "click", "params": {"id" : "viewNavCenterRight"}}
+{"method": "click", "params": {"id" : "viewNavCenterRight"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "doubleClick", "params": {"id" : "hourDiv1-900"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "type", "params": {"id" : "eventtitle", "text": "Testing Timezones LA"}}
+{"method": "select", "params": {"id" : "tzRegion", "option": "America"}}
+{"method": "select", "params": {"id" : "tzId", "option": "Los Angeles"}}
+{"method": "type", "params": {"id" : "eventdescr", "text": "A description of my test of timezones LA."}}
+{"method": "click", "params": {"id" : "cosmo_Button_1"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "doubleClick", "params": {"id" : "hourDiv2-930"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "type", "params": {"id" : "eventtitle", "text": "Testing Timezones NY"}}
+{"method": "select", "params": {"id" : "tzRegion", "option": "America"}}
+{"method": "select", "params": {"id" : "tzId", "option": "New York"}}
+{"method": "type", "params": {"id" : "eventdescr", "text": "A description of my test of timezones NY."}}
+{"method": "click", "params": {"id" : "cosmo_Button_1"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "doubleClick", "params": {"id" : "hourDiv3-1000"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "type", "params": {"id" : "eventtitle", "text": "Testing Timezones El Salvador"}}
+{"method": "select", "params": {"id" : "tzRegion", "option": "America"}}
+{"method": "select", "params": {"id" : "tzId", "option": "El Salvador"}}
+{"method": "type", "params": {"id" : "eventdescr", "text": "A description of my test of timezones El Salvador."}}
+{"method": "click", "params": {"id" : "cosmo_Button_1"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "doubleClick", "params": {"id" : "hourDiv4-1030"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "type", "params": {"id" : "eventtitle", "text": "Testing Timezones Cancun"}}
+{"method": "select", "params": {"id" : "tzRegion", "option": "America"}}
+{"method": "select", "params": {"id" : "tzId", "option": "Cancun"}}
+{"method": "type", "params": {"id" : "eventdescr", "text": "A description of my test of timezones Cancun."}}	
+{"method": "click", "params": {"id" : "cosmo_Button_1"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "doubleClick", "params": {"id" : "hourDiv5-1100"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "type", "params": {"id" : "eventtitle", "text": "Testing Timezones Boise"}}
+{"method": "select", "params": {"id" : "tzRegion", "option": "America"}}
+{"method": "select", "params": {"id" : "tzId", "option": "Boise"}}
+{"method": "type", "params": {"id" : "eventdescr", "text": "A description of my test of timezones Boise."}}
+{"method": "click", "params": {"id" : "cosmo_Button_1"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
\ No newline at end of file
Index: cosmo/src/test/functional/windmill/event_properties.json
===================================================================
--- cosmo/src/test/functional/windmill/event_properties.json	(revision 3653)
+++ cosmo/src/test/functional/windmill/event_properties.json	(working copy)
@@ -1,8 +1,12 @@
-{"method": "click", "params": {"id" : "viewNavRight"}}
-{"method": "wait", "params": {"seconds" : 5000}}
+{"method": "click", "params": {"id" : "viewNavCenterRight"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "type", "params": {"id" : "eventtitle", "text": "Properties Test"}}
 {"method": "type", "params": {"id" : "starttime", "text": "9:00"}}
 {"method": "type", "params": {"id" : "endtime", "text": "4:00"}}
+{"method": "radio", "params": {"xpath" : "/html/body/div[2]/form/div[7]/div/div/div/div[10]/input[4]"}}
+{"method": "radio", "params": {"xpath" : "/html/body/div[2]/form/div[7]/div/div/div/div[8]/input[3]"}}
 {"method": "select", "params": {"id" : "status", "option": "Tentative"}}
 {"method": "type", "params": {"id" : "eventdescr", "text": "A description for the properties test"}}
+{"method": "click", "params": {"id" : "cosmo_Button_1"}}
\ No newline at end of file
Index: cosmo/src/test/functional/windmill/recurrence.json
===================================================================
--- cosmo/src/test/functional/windmill/recurrence.json	(revision 3653)
+++ cosmo/src/test/functional/windmill/recurrence.json	(working copy)
@@ -0,0 +1,48 @@
+{"method": "click", "params": {"id" : "viewNavCenterRight"}}
+{"method": "click", "params": {"id" : "viewNavCenterRight"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "doubleClick", "params": {"id" : "hourDiv1-900"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "type", "params": {"id" : "eventtitle", "text": "Testing Daily Recurrence"}}
+{"method": "select", "params": {"id" : "recurrence", "option": "Daily"}}
+{"method": "type", "params": {"id" : "eventdescr", "text": "A description of my test of daily recurrence."}}
+{"method": "click", "params": {"id" : "cosmo_Button_1"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "doubleClick", "params": {"id" : "hourDiv1-930"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "type", "params": {"id" : "eventtitle", "text": "Testing Weekly Recurrence"}}
+{"method": "select", "params": {"id" : "recurrence", "option": "Weekly"}}
+{"method": "type", "params": {"id" : "eventdescr", "text": "A description of my test of weekly recurrence."}}
+{"method": "click", "params": {"id" : "cosmo_Button_1"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "doubleClick", "params": {"id" : "hourDiv1-1000"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "type", "params": {"id" : "eventtitle", "text": "Testing bi-weekly Recurrence"}}
+{"method": "select", "params": {"id" : "recurrence", "option": "Biweekly"}}
+{"method": "type", "params": {"id" : "eventdescr", "text": "A description of my test of bi-weekly recurrence."}}
+{"method": "click", "params": {"id" : "cosmo_Button_1"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "doubleClick", "params": {"id" : "hourDiv1-1030"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "type", "params": {"id" : "eventtitle", "text": "Testing monthly Recurrence"}}
+{"method": "select", "params": {"id" : "recurrence", "option": "Monthly"}}
+{"method": "type", "params": {"id" : "eventdescr", "text": "A description of my test of monthly recurrence."}}
+{"method": "click", "params": {"id" : "cosmo_Button_1"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "doubleClick", "params": {"id" : "hourDiv1-1100"}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "wait", "params": {"milliseconds" : 7000}}
+{"method": "type", "params": {"id" : "eventtitle", "text": "Testing yearly Recurrence"}}
+{"method": "select", "params": {"id" : "recurrence", "option": "Yearly"}}
+{"method": "type", "params": {"id" : "eventdescr", "text": "A description of my test of yearly recurrence."}}
+{"method": "click", "params": {"id" : "cosmo_Button_1"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
\ No newline at end of file
Index: cosmo/src/test/functional/windmill/create_user_test.json
===================================================================
--- cosmo/src/test/functional/windmill/create_user_test.json	(revision 3653)
+++ cosmo/src/test/functional/windmill/create_user_test.json	(working copy)
@@ -1,13 +1,13 @@
 {"method": "click", "params": {"link" : "Log in to Cosmo"}}
-{"method": "wait", "params": {"seconds" : 3000}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
 {"method": "click", "params": {"link" : "Click here to create one."}}
-{"method": "click", "params": {"jsid" : "parent.frames[1].cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
-{"method": "type", "params": {"id" : "username", "text": "tester47"}}
-{"method": "type", "params": {"id" : "firstName", "text": "tester47"}}
-{"method": "type", "params": {"id" : "lastName", "text": "tester47"}}
-{"method": "type", "params": {"id" : "email", "text": "tester47@osafoundation.org"}}
+{"method": "click", "params": {"jsid" : "Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+{"method": "type", "params": {"id" : "username", "text": "tester"}}
+{"method": "type", "params": {"id" : "firstName", "text": "tester"}}
+{"method": "type", "params": {"id" : "lastName", "text": "tester"}}
+{"method": "type", "params": {"id" : "email", "text": "tester@osafoundation.org"}}
 {"method": "type", "params": {"id" : "password", "text": "tester"}}
 {"method": "type", "params": {"id" : "confirm", "text": "tester"}}
-{"method": "click", "params": {"jsid" : "parent.frames[1].cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
-{"method": "wait", "params": {"seconds" : 3000}}
-{"method": "click", "params": {"jsid" : "parent.frames[1].cosmo.app.modalDialog.btnsCenter[0].domNode.id"}}
\ No newline at end of file
+{"method": "click", "params": {"jsid" : "Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"jsid" : "Windmill.TestingApp.cosmo.app.modalDialog.btnsCenter[0].domNode.id"}}
\ No newline at end of file
Index: cosmo/src/test/functional/windmill/settings.json
===================================================================
--- cosmo/src/test/functional/windmill/settings.json	(revision 3653)
+++ cosmo/src/test/functional/windmill/settings.json	(working copy)
@@ -0,0 +1,25 @@
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"link" : "Settings"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"xpath" : "/html/body/div[4]/table/tbody/tr[2]/td[2]/div[4]/span/div/table/tbody/tr/td[4]"}}
+{"method": "check", "params": {"id" : "showAccountBrowser"}}
+{"method": "click", "params": {"xpath" : "/html/body/div[4]/table/tbody/tr[2]/td[2]/div[4]/span/div/table/tbody/tr/td[6]"}}
+{"method": "click", "params": {"xpath" : "/html/body/div[4]/table/tbody/tr[2]/td[2]/div[5]/span/table/tbody/tr/td[3]/div/table/tbody/tr/td/input"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"link" : "Settings"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"xpath" : "/html/body/div[4]/table/tbody/tr[2]/td[2]/div[4]/span/div/table/tbody/tr/td[4]"}}
+{"method": "check", "params": {"id" : "showAccountBrowser"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"xpath" : "/html/body/div[4]/table/tbody/tr[2]/td[2]/div[5]/span/table/tbody/tr/td[3]/div/table/tbody/tr/td/input"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"xpath" : "/html/body/div[2]/form/div/div/span/div[2]/div[3]/img"}}
+{"method": "select", "params": {"xpath" : "/html/body/div[4]/table/tbody/tr[2]/td[2]/div[4]/div/table/tbody/tr[3]/td[2]/div/select", "option": "Apple iCal v2.x"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
+{"method": "select", "params": {"xpath" : "/html/body/div[4]/table/tbody/tr[2]/td[2]/div[4]/div/table/tbody/tr[3]/td[2]/div/select", "option": "Feed Reader"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
+{"method": "click", "params": {"xpath" : "/html/body/div[4]/table/tbody/tr[2]/td[2]/div[5]/span/table/tbody/tr/td[3]/div/table/tbody/tr/td[3]/input"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
\ No newline at end of file
Index: cosmo/src/test/functional/windmill/login_with_user.json
===================================================================
--- cosmo/src/test/functional/windmill/login_with_user.json	(revision 3653)
+++ cosmo/src/test/functional/windmill/login_with_user.json	(working copy)
@@ -1,4 +1,6 @@
-{"method": "type", "params": {"id" : "loginDialogUsernameInput", "text": "tester47"}}
+{"method": "type", "params": {"id" : "loginDialogUsernameInput", "text": "tester"}}
 {"method": "type", "params": {"id" : "loginDialogPasswordInput", "text": "tester"}}
-{"method": "click", "params": {"id" : "loginSubmitButtonText"}}
-{"method": "wait", "params": {"seconds" : 3000}}
\ No newline at end of file
+{"method": "click", "params": {"id" : "loginSubmitButton"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
\ No newline at end of file
Index: cosmo/src/test/functional/windmill/initial_suite.json
===================================================================
--- cosmo/src/test/functional/windmill/initial_suite.json	(revision 3653)
+++ cosmo/src/test/functional/windmill/initial_suite.json	(working copy)
@@ -1,25 +1,56 @@
 {"method": "click", "params": {"link" : "Log in to Cosmo"}}
-{"method": "wait", "params": {"seconds" : 3000}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
 {"method": "click", "params": {"link" : "Click here to create one."}}
-{"method": "click", "params": {"jsid" : "parent.frames[1].cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
-{"method": "type", "params": {"id" : "username", "text": "tester99"}}
-{"method": "type", "params": {"id" : "firstName", "text": "tester99"}}
-{"method": "type", "params": {"id" : "lastName", "text": "tester99"}}
-{"method": "type", "params": {"id" : "email", "text": "tester99@osafoundation.org"}}
+{"method": "click", "params": {"jsid" : "{"method": "click", "params": {"jsid" : "Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+{"method": "type", "params": {"id" : "username", "text": "tester240"}}
+{"method": "type", "params": {"id" : "firstName", "text": "tester240"}}
+{"method": "type", "params": {"id" : "lastName", "text": "tester240"}}
+{"method": "type", "params": {"id" : "email", "text": "tester240@osafoundation.org"}}
 {"method": "type", "params": {"id" : "password", "text": "tester"}}
 {"method": "type", "params": {"id" : "confirm", "text": "tester"}}
-{"method": "click", "params": {"jsid" : "parent.frames[1].cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
-{"method": "wait", "params": {"seconds" : 3000}}
-{"method": "click", "params": {"jsid" : "parent.frames[1].cosmo.app.modalDialog.btnsCenter[0].domNode.id"}}
-{"method": "type", "params": {"id" : "loginDialogUsernameInput", "text": "tester99"}}
+{"method": "click", "params": {"jsid" : "{"method": "click", "params": {"jsid" : "Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "verify", "params": {"id" : "modalDialogPrompt", "validator" : "You have successfully created your Cosmo account."}}
+{"method": "click", "params": {"jsid" : "{"method": "click", "params": {"jsid" : "Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+Windmill.TestingApp.cosmo.app.modalDialog.btnsCenter[0].domNode.id"}}
+{"method": "type", "params": {"id" : "loginDialogUsernameInput", "text": "tester240"}}
 {"method": "type", "params": {"id" : "loginDialogPasswordInput", "text": "tester"}}
 {"method": "click", "params": {"id" : "loginSubmitButtonText"}}
-{"method": "wait", "params": {"seconds" : 3000}}
-{"method": "wait", "params": {"seconds" : 3000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
-{"method": "wait", "params": {"seconds" : 2000}}
-{"method": "doubleClick", "params": {"id" : "hourDiv2-0900"}}
-{"method": "wait", "params": {"seconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv4-1000"}}
-{"method": "wait", "params": {"seconds" : 2000}}
-{"method": "doubleClick", "params": {"id" : "hourDiv5-1100"}}
\ No newline at end of file
+{"method": "doubleClick", "params": {"id" : "hourDiv5-1100"}}
+{"method": "doubleClick", "params": {"id" : "hourDiv2-1300"}}
+{"method": "click", "params": {"id" : "viewNavCenterRight"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
+{"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
+{"method": "type", "params": {"id" : "eventtitle", "text": "Properties Test"}}
+{"method": "type", "params": {"id" : "startdate", "text": "02/09/2007"}}
+{"method": "type", "params": {"id" : "enddate", "text": "02/09/2007"}}
+{"method": "type", "params": {"id" : "starttime", "text": "6:00"}}
+{"method": "type", "params": {"id" : "endtime", "text": "11:30"}}
+{"method": "click", "params": {"id" : "startap"}}
+{"method": "click", "params": {"id" : "endap"}}
+{"method": "select", "params": {"id" : "status", "option": "Tentative"}}
+{"method": "type", "params": {"id" : "eventdescr", "text": "A description for the properties test"}}
+{"method": "click", "params": {"id" : "cosmo_Button_1Text"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
+{"method": "click", "params": {"link" : "Settings"}}
+{"method": "click", "params": {"id" : "cosmo_TabContainer_0_tab1"}}
+{"method": "click", "params": {"id" : "showAccountBrowser"}}
+{"method": "click", "params": {"id" : "cosmo_Button_4Text"}}
+{"method": "type", "params": {"id" : "jumpto", "text": "02/11/2008"}}
+{"method": "click", "params": {"id" : "cosmo_Button_2Text"}}
+{"method": "doubleClick", "params": {"id" : "hourDiv5-1100"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
+{"method": "click", "params": {"id" : "miniCal_month1_day19"}}
+{"method": "doubleClick", "params": {"id" : "hourDiv5-1100"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
+{"method": "click", "params": {"xpath" : "/html/body/div[2]/form/div/div/span/div[2]/div[3]/img"}}
+{"method": "select", "params": {"xpath" : "/html/body/div[4]/div/div[4]/div/table/tbody/tr[3]/td[2]/div/select","option": "Other..."}}
+{"method": "click", "params": {"jsid" : "{"method": "click", "params": {"jsid" : "Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+{"method": "click", "params": {"link" : "Log Out"}}
Index: cosmo/src/test/functional/windmill/create_events_test.json
===================================================================
--- cosmo/src/test/functional/windmill/create_events_test.json	(revision 3653)
+++ cosmo/src/test/functional/windmill/create_events_test.json	(working copy)
@@ -1,25 +1,25 @@
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv3-2000"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv4-1000"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv5-1100"}}
-{"method": "click", "params": {"id" : "viewNavRight"}}
-{"method": "wait", "params": {"seconds" : 5000}}
+{"method": "click", "params": {"id" : "viewNavCenterRight"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv2-1100"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv4-1000"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv5-1100"}}
-{"method": "click", "params": {"id" : "viewNavRight"}}
-{"method": "wait", "params": {"seconds" : 5000}}
+{"method": "click", "params": {"id" : "viewNavCenterRight"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1230"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1130"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
\ No newline at end of file
Index: cosmo/src/test/functional/windmill/drag_drop_test.json
===================================================================
--- cosmo/src/test/functional/windmill/drag_drop_test.json	(revision 0)
+++ cosmo/src/test/functional/windmill/drag_drop_test.json	(revision 3934)
@@ -0,0 +1,60 @@
+{"method": "click", "params": {"id" : "viewNavCenterRight"}}
+{"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "cosmoDragDrop", "params": {"dragged" : {"jsid": "Windmill.TestingApp.cosmo.view.cal.canvas.getSelectedEvent().id"}, "destination": {"id": "hourDiv4-1300"}}}
+{"method": "doubleClick", "params": {"id" : "hourDiv3-900"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "cosmoDragDrop", "params": {"dragged" : {"jsid": "Windmill.TestingApp.cosmo.view.cal.canvas.getSelectedEvent().id"}, "destination": {"id": "hourDiv0-900"}}}
+{"method": "doubleClick", "params": {"id" : "hourDiv4-1000"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "cosmoDragDrop", "params": {"dragged" : {"jsid": "Windmill.TestingApp.cosmo.view.cal.canvas.getSelectedEvent().id"}, "destination": {"id": "hourDiv1-1100"}}}
+{"method": "doubleClick", "params": {"id" : "hourDiv5-1100"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "cosmoDragDrop", "params": {"dragged" : {"jsid": "Windmill.TestingApp.cosmo.view.cal.canvas.getSelectedEvent().id"}, "destination": {"id": "hourDiv3-1200"}}}
+{"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "cosmoDragDrop", "params": {"dragged" : {"jsid": "Windmill.TestingApp.cosmo.view.cal.canvas.getSelectedEvent().id"}, "destination": {"id": "hourDiv2-1200"}}}
+{"method": "doubleClick", "params": {"id" : "hourDiv2-1100"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "cosmoDragDrop", "params": {"dragged" : {"jsid": "Windmill.TestingApp.cosmo.view.cal.canvas.getSelectedEvent().id"}, "destination": {"id": "hourDiv4-800"}}}
+{"method": "doubleClick", "params": {"id" : "hourDiv4-1000"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "cosmoDragDrop", "params": {"dragged" : {"jsid": "Windmill.TestingApp.cosmo.view.cal.canvas.getSelectedEvent().id"}, "destination": {"id": "hourDiv2-1530"}}}
+{"method": "doubleClick", "params": {"id" : "hourDiv5-1100"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "cosmoDragDrop", "params": {"dragged" : {"jsid": "Windmill.TestingApp.cosmo.view.cal.canvas.getSelectedEvent().id"}, "destination": {"id": "hourDiv5-1130"}}}
+{"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "cosmoDragDrop", "params": {"dragged" : {"jsid": "Windmill.TestingApp.cosmo.view.cal.canvas.getSelectedEvent().id"}, "destination": {"id": "hourDiv1-900"}}}
+{"method": "doubleClick", "params": {"id" : "hourDiv1-1230"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "cosmoDragDrop", "params": {"dragged" : {"jsid": "Windmill.TestingApp.cosmo.view.cal.canvas.getSelectedEvent().id"}, "destination": {"id": "hourDiv1-900"}}}
+{"method": "doubleClick", "params": {"id" : "hourDiv1-1130"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "cosmoDragDrop", "params": {"dragged" : {"jsid": "Windmill.TestingApp.cosmo.view.cal.canvas.getSelectedEvent().id"}, "destination": {"id": "hourDiv1-900"}}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "click", "params": {"id" : "viewNavCenterRight"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "cosmoDragDrop", "params": {"dragged" : {"jsid": "Windmill.TestingApp.cosmo.view.cal.canvas.getSelectedEvent().id"}, "destination": {"id": "hourDiv1-900"}}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "cosmoDragDrop", "params": {"dragged" : {"jsid": "Windmill.TestingApp.cosmo.view.cal.canvas.getSelectedEvent().id"}, "destination": {"id": "hourDiv5-1300"}}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
+{"method": "cosmoDragDrop", "params": {"dragged" : {"jsid": "Windmill.TestingApp.cosmo.view.cal.canvas.getSelectedEvent().id"}, "destination": {"id": "hourDiv0-1130"}}}
\ No newline at end of file
Index: cosmo/src/test/functional/windmill/test_conf.py
===================================================================
--- cosmo/src/test/functional/windmill/test_conf.py	(revision 0)
+++ cosmo/src/test/functional/windmill/test_conf.py	(revision 3934)
@@ -0,0 +1 @@
+test_list = ['create_user_test.json', 'login_with_user.json','settings.json', 'drag_drop_test.json', 'event_properties.json','mini_cal.json','time_zones.json','recurrence.json','admin.json']
Index: cosmo/src/test/functional/protocol/test_apples_dataset.py
===================================================================
--- cosmo/src/test/functional/protocol/test_apples_dataset.py	(revision 3653)
+++ cosmo/src/test/functional/protocol/test_apples_dataset.py	(working copy)
@@ -1,40 +1,82 @@
-import cosmoclient
-import random
-import os, sys
-from xml.etree import ElementTree
-
-import cosmo_test_lib
-from cosmo_test_lib import *
-
-# COPY and MOVE operations
-# DELETE Calendar Collection
-# Put of todo and vfreebusy
-
-CALENDAR = 'calendar'
-FILES_DIR =  os.path.dirname(os.path.abspath(sys.modules[__name__].__file__))+'/files/'
-
-def setup_module(module):
-    cosmo_test_lib.setup_module(module)
-    client.mkcol('%s/applesdataset' % module.PRINCIPAL_DAV_PATH)
-    assert client.response.status == 201
-
-def test_all_apple_dataset():
-    """Test the whole dataset"""
-    def recursive_upload(full_path, collection):
-    # Recursively run through the directories and upload all the relevant files
-        for filename in os.listdir(full_path):
-            print full_path+'/'+filename
-            if filename.startswith('.') is False and os.path.isdir(full_path+'/'+filename):
-                client._request('MKCALENDAR', '%s/%s' % (collection, filename))
-                assert client.response.status == 201
-                recursive_upload(full_path+'/'+filename, collection+'/'+filename)
-                    
-            elif filename.endswith('.xml') is False and os.path.isdir(full_path+'/'+filename) is False:
-                if filename.endswith('.txt'):
-                    up_name = filename.replace('.txt', '.ics')
-                else:
-                    up_name = filename
-                client.put('%s/%s' % (collection, up_name), f=open(full_path+'/'+filename))
-                assert client.response.status == 201
-    
-    recursive_upload(FILES_DIR+'/ApplesResource', '%s/applesdataset' % PRINCIPAL_DAV_PATH)
\ No newline at end of file
+# #   Copyright (c) 2006-2007 Open Source Applications Foundation
+# #
+# #   Licensed under the Apache License, Version 2.0 (the "License");
+# #   you may not use this file except in compliance with the License.
+# #   You may obtain a copy of the License at
+# #
+# #       http://www.apache.org/licenses/LICENSE-2.0
+# #
+# #   Unless required by applicable law or agreed to in writing, software
+# #   distributed under the License is distributed on an "AS IS" BASIS,
+# #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# #   See the License for the specific language governing permissions and
+# #   limitations under the License.
+# 
+# import cosmoclient
+# import random
+# import os, sys
+# from xml.etree import ElementTree
+# 
+# import cosmo_test_lib
+# from cosmo_test_lib import *
+# 
+# # COPY and MOVE operations
+# # DELETE Calendar Collection
+# # Put of todo and vfreebusy
+# 
+# 
+# # STATUS returns 500 error
+# # ATTACHMENT returns 400, 'Bad Request: Invalid calendar object: An error ocurred during parsing - line: #'
+# # VAVAILABILITY returns 400, 'Bad Request: Invalid calendar object: An error ocurred during parsing - line: #'
+# # putting an event with the same uid in two collections causes a 204
+# # error parsing TZOFFSETTO:0100
+# 
+# CALENDAR = 'calendar'
+# FILES_DIR =  os.path.dirname(os.path.abspath(sys.modules[__name__].__file__))+'/files/'
+# 
+# def setup_module(module):
+#     cosmo_test_lib.setup_module(module)
+#     client.mkcol('%s/applesdataset' % module.PRINCIPAL_DAV_PATH)
+#     assert client.response.status == 201
+# 
+# def test_all_apple_dataset():
+#     """Test the whole dataset"""
+#     
+#     uids = []
+#     client._request('MKCALENDAR', '%s/%s/%s' % (PRINCIPAL_DAV_PATH, 'applesdataset', 'defaulted'))
+#     assert client.response.status == 201
+#     
+#     def recursive_upload(full_path, collection):
+#     # Recursively run through the directories and upload all the relevant files
+#         for filename in os.listdir(full_path):
+#             print full_path+'/'+filename
+#             if filename.startswith('.') is False and os.path.isdir(full_path+'/'+filename):
+#                 if filename == 'put' or filename == 'freebusy':
+#                     client._request('MKCALENDAR', '%s/%s' % (collection, str(random.random()).replace('.', '')))
+#                 else:    
+#                     client._request('MKCALENDAR', '%s/%s' % (collection, filename))
+#                 assert client.response.status == 201
+#                 recursive_upload(full_path+'/'+filename, collection)
+#                     
+#             elif filename.startswith('.') is False and filename.endswith('.xml') is False and os.path.isdir(full_path+'/'+filename) is False and open(full_path+'/'+filename).read().find('<?xml') is -1:
+#                 up_name = str(random.random()).replace('.', '')+'.ics'
+# 
+#                     
+#                 #find uid, work around for bug in cosmo
+#                 for line in open(full_path+'/'+filename).read().splitlines():
+#                     if line.find('UID:') is not -1:
+#                         uid = line.split('UID:')[-1]
+#                         # open(full_path+'/'+filename).read().find('STATUS') is -1 and
+#                 if open(full_path+'/'+filename).read().find('VAVAILABILITY') is -1 and open(full_path+'/'+filename).read().find('ATTACHMENT') is -1 and uid not in set(uids) and open(full_path+'/'+filename).read().find('TZOFFSETTO:0100') is -1:
+#                     if collection.endswith('applesdataset'):
+#                         collection = collection.replace('applesdataset', 'applesdataset/defaulted')
+#                     body = open(full_path+'/'+filename).read().replace('$', '')
+#                     client.put('%s/%s' % (collection, up_name), body=body)
+#                     assert client.response.status == 201 or client.response.status == 204
+#                     for line in open(full_path+'/'+filename).read().splitlines():
+#                         if line.find('UID:') is not -1:
+#                             uids.append(line.split('UID:')[-1])
+#                         
+#                     
+#     
+#     recursive_upload(FILES_DIR+'/ApplesResource', '%s/applesdataset' % PRINCIPAL_DAV_PATH)
\ No newline at end of file
Index: cosmo/src/test/functional/protocol/test_cmp.py
===================================================================
--- cosmo/src/test/functional/protocol/test_cmp.py	(revision 3653)
+++ cosmo/src/test/functional/protocol/test_cmp.py	(working copy)
@@ -73,7 +73,27 @@
     assert client.response.status == 201
     client.remove_user('test_delete_user')
     assert client.response.status == 204
+
+def test_administrator_tag():
+    from xml.etree import ElementTree
     
+    client.get(client._cmp_path+'/users')
+    assert client.response.status == 200
+    assert client.response.body.find('root') is not -1
+    root_user_element = [x for x in client.response.tree.findall('{http://osafoundation.org/cosmo/CMP}user') if x.find('{http://osafoundation.org/cosmo/CMP}username').text == 'root'][0]
+    assert root_user_element.find('{http://osafoundation.org/cosmo/CMP}administrator').text == 'true'
+    test_user_element = [x for x in client.response.tree.findall('{http://osafoundation.org/cosmo/CMP}user') if x.find('{http://osafoundation.org/cosmo/CMP}username').text == TEST_USER][0]
+    assert test_user_element.find('{http://osafoundation.org/cosmo/CMP}administrator').text == 'false'
+    client.modify_user({'username':TEST_USER, 'administrator':'true'})
+    assert client.response.status == 204
+    client.get(client._cmp_path+'/users')
+    assert client.response.status == 200
+    test_user_element = [x for x in client.response.tree.findall('{http://osafoundation.org/cosmo/CMP}user') if x.find('{http://osafoundation.org/cosmo/CMP}username').text == TEST_USER][0]
+    assert test_user_element.find('{http://osafoundation.org/cosmo/CMP}administrator').text == 'true'
+    client.modify_user({'username':TEST_USER, 'administrator':'false'})
+    assert client.response.status  == 204
+    
+    
 def teardown_module(module):
     client.remove_user('test_modify_user')
     assert client.response.status == 204
@@ -81,6 +101,6 @@
     assert client.response.status == 204  
     client.remove_user(TEST_USER_2)
     assert client.response.status == 204  
-    
+
         
     
\ No newline at end of file
Index: cosmo/src/test/functional/protocol/test_move_copy.py
===================================================================
--- cosmo/src/test/functional/protocol/test_move_copy.py	(revision 3653)
+++ cosmo/src/test/functional/protocol/test_move_copy.py	(working copy)
@@ -31,8 +31,22 @@
     assert client.response.status == 201
     client.move('%s/testcollection1/blah.txt' % PRINCIPAL_DAV_PATH, '%s/testcollection2/blah.txt' % PRINCIPAL_DAV_PATH)
     assert client.response.status == 201
-    client.propfind('%s/testcollection1/' % PRINCIPAL_DAV_PATH)
-    client.propfind('%s/testcollection2/' % PRINCIPAL_DAV_PATH)
+    assert len(client.propfind('%s/testcollection1/' % PRINCIPAL_DAV_PATH)) is 1
+    assert len(client.propfind('%s/testcollection2/' % PRINCIPAL_DAV_PATH)) is 2
     
     ### More to write but cosmo is failing already at this point
+def test_copy_text_data():
+    client.mkcol('%s/testcollection3' % PRINCIPAL_DAV_PATH)
+    assert client.response.status == 201
+    client.mkcol('%s/testcollection4' % PRINCIPAL_DAV_PATH)
+    assert client.response.status == 201
+    client.put('%s/testcollection3/blah.txt' % PRINCIPAL_DAV_PATH, body='BALHALAHLAHLALH')
+    assert client.response.status == 201
+    client.copy('%s/testcollection3/blah.txt' % PRINCIPAL_DAV_PATH, '%s/testcollection4/blah.txt' % PRINCIPAL_DAV_PATH)
+    assert client.response.status == 201
+    assert len(client.propfind('%s/testcollection3/' % PRINCIPAL_DAV_PATH)) is 2
+    assert len(client.propfind('%s/testcollection4/' % PRINCIPAL_DAV_PATH)) is 2
+    
+    
+    
     
\ No newline at end of file
Index: cosmo/src/test/functional/protocol/test_icalendar_props.py
===================================================================
--- cosmo/src/test/functional/protocol/test_icalendar_props.py	(revision 3653)
+++ cosmo/src/test/functional/protocol/test_icalendar_props.py	(working copy)
@@ -21,7 +21,6 @@
 from cosmo_test_lib import *
 
 CALENDAR = 'calendar'
-FILES_DIR =  os.path.dirname(os.path.abspath(sys.modules[__name__].__file__))+'/files/'
 
 def test_attachment():
     ics = """BEGIN:VCALENDAR
@@ -159,10 +158,48 @@
     client.put('%s/%s/3.ics' % (PRINCIPAL_DAV_PATH, CALENDAR), body=ics)
     assert client.response.status == 201
     
+def test_sunbird_allday():
     
+    ics = """BEGIN:VCALENDAR
+VERSION:2.0
+PRODID:-//Mozilla.org/NONSGML Mozilla Calendar V1.1//EN
+BEGIN:VEVENT
+CREATED:20061027T190852Z
+LAST-MODIFIED:20061027T190852Z
+DTSTAMP:20061027T190852Z
+UID:b83bee1f-0a20-418b-af3f-e8d49b80ddb9
+SUMMARY:test
+CLASS:PUBLIC
+DTSTART;VALUE=DATE;TZID=/mozilla.org/20050126_1/America/Cancun:20061114
+DTEND;VALUE=DATE;TZID=/mozilla.org/20050126_1/America/Cancun:20061115
+LOCATION:test
+END:VEVENT
+BEGIN:VTIMEZONE
+TZID:/mozilla.org/20050126_1/America/Cancun
+X-LIC-LOCATION:America/Cancun
+BEGIN:DAYLIGHT
+TZOFFSETFROM:-0600
+TZOFFSETTO:-0500
+TZNAME:CDT
+DTSTART:19700405T020000
+RRULE:FREQ=YEARLY;INTERVAL=1;BYDAY=1SU;BYMONTH=4
+END:DAYLIGHT
+BEGIN:STANDARD
+TZOFFSETFROM:-0500
+TZOFFSETTO:-0600
+TZNAME:CST
+DTSTART:19701025T020000
+RRULE:FREQ=YEARLY;INTERVAL=1;BYDAY=-1SU;BYMONTH=10
+END:STANDARD
+END:VTIMEZONE
+END:VCALENDAR"""
     
+    client.put('%s/%s/sunbird.ics' % (PRINCIPAL_DAV_PATH, CALENDAR), body=ics)
+    assert client.response.status == 201
     
     
     
     
     
+    
+    
Index: cosmo/src/test/functional/protocol/cosmo_test_lib.py
===================================================================
--- cosmo/src/test/functional/protocol/cosmo_test_lib.py	(revision 3653)
+++ cosmo/src/test/functional/protocol/cosmo_test_lib.py	(working copy)
@@ -13,12 +13,13 @@
 #   limitations under the License.
 
 import cosmoclient
-import random, uuid
+import random, uuid, os, sys
 
-SERVER_URL = 'http://qacosmo.osafoundation.org:80'
+SERVER_URL = 'http://qacosmo.osafoundation.org'
 ADMIN_USER = 'root'
 ADMIN_PASS = 'cosmo'
 PRINCIPAL_ROOT = '/cosmo/dav'
+FILES_DIR =  os.path.dirname(os.path.abspath(sys.modules[__name__].__file__))+'/files/'
 
 TEST_USER_PREFIX = 'test_user_'
 
@@ -34,6 +35,7 @@
     module.TEST_EMAIL = module.TEST_USER+'@osafoundation.org'
     module.PRINCIPAL_ROOT = PRINCIPAL_ROOT
     module.PRINCIPAL_DAV_PATH = '%s/%s' % (PRINCIPAL_ROOT, module.TEST_USER)
+    module.FILES_DIR = FILES_DIR
     
     #Setup client and users
     client = cosmoclient.CosmoClient(module.SERVER_URL)
Index: cosmo/src/main/java/org/osaf/cosmo/model/User.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/model/User.java	(revision 3653)
+++ cosmo/src/main/java/org/osaf/cosmo/model/User.java	(working copy)
@@ -122,6 +122,12 @@
      * A String indicating the results should be sorted by Date last Modified
      */
     public static final String LAST_MODIFIED_SORT_STRING = "Last Modified";
+    /**
+     * A String indicating the results should be sorted by Activated status
+     */
+    public static final String ACTIVATED_SORT_STRING = "Activated";
+    
+    
 
     /**
      * The Default Sort Type
@@ -134,6 +140,7 @@
     public static final String EMAIL_URL_STRING = "email";
     public static final String CREATED_URL_STRING = "created";
     public static final String LAST_MODIFIED_URL_STRING = "modified";
+    public static final String ACTIVATED_URL_STRING = "activated";
 
     private String uid;
     private String username;
@@ -646,7 +653,8 @@
         ADMIN (ADMIN_URL_STRING, ADMIN_SORT_STRING),
         EMAIL (EMAIL_URL_STRING, EMAIL_SORT_STRING),
         CREATED (CREATED_URL_STRING, CREATED_SORT_STRING),
-        LAST_MODIFIED (LAST_MODIFIED_URL_STRING, LAST_MODIFIED_SORT_STRING);
+        LAST_MODIFIED (LAST_MODIFIED_URL_STRING, LAST_MODIFIED_SORT_STRING),
+        ACTIVATED (ACTIVATED_URL_STRING, ACTIVATED_SORT_STRING);
 
         private final String urlString;
         private final String titleString;
@@ -677,6 +685,8 @@
                 return CREATED;
             } else if (string.equals(LAST_MODIFIED_URL_STRING)){
                 return LAST_MODIFIED;
+            } else if (string.equals(ACTIVATED_URL_STRING)){
+                return ACTIVATED;
             } else {
                 return null;
             }
Index: cosmo/src/main/java/org/osaf/cosmo/model/package-info.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/model/package-info.java	(revision 3653)
+++ cosmo/src/main/java/org/osaf/cosmo/model/package-info.java	(working copy)
@@ -72,6 +72,9 @@
     @NamedQuery(name="user.byUid", query="from User where uid=:uid"),
     @NamedQuery(name="user.byActivationId", query="from User where activationid=:activationId"),
 
+    // Password Recovery entity query
+    @NamedQuery(name="passwordRecovery.byKey", query="from PasswordRecovery where key=:key"),
+
     // Event Queries
     @NamedQuery(name="event.by.calendar.icaluid", query="select i from ContentItem i, CalendarPropertyIndex pi where pi.item.id=i.id and i.parent=:calendar and pi.name='icalendar:vcalendar-vevent_uid' and pi.value=:uid and i.isActive=true"),
     
Index: cosmo/src/main/java/org/osaf/cosmo/model/PasswordRecovery.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/model/PasswordRecovery.java	(revision 0)
+++ cosmo/src/main/java/org/osaf/cosmo/model/PasswordRecovery.java	(revision 3934)
@@ -0,0 +1,168 @@
+/*
+ * Copyright 2007 Open Source Applications Foundation
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.osaf.cosmo.model;
+
+import java.util.Date;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.FetchType;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.Table;
+
+import org.apache.commons.lang.builder.EqualsBuilder;
+import org.apache.commons.lang.builder.HashCodeBuilder;
+import org.apache.commons.lang.builder.ToStringBuilder;
+import org.hibernate.annotations.Index;
+import org.hibernate.annotations.Type;
+import org.hibernate.validator.NotNull;
+
+/**
+ * An entity representing a password change request.
+ * 
+ * There should be a single password change request corresponding
+ * to each password recovery request in the system. 
+ */
+@Entity
+@Table(name="pwrecovery")
+public class PasswordRecovery extends BaseModelObject {
+
+    private static final long serialVersionUID = 854107654491442548L;
+
+    private static final long DEFAULT_TIMEOUT = 1000*60*60*24*3; // 3 days
+    
+    private String key;
+    private Date created;
+    private long timeout;
+    private User user;
+    
+    public PasswordRecovery(){
+        this(null, null);
+    }
+    
+    /**
+     */
+    public PasswordRecovery(User user, String key) {
+        this(user, key, DEFAULT_TIMEOUT);
+    }
+    
+    /**
+     * 
+     */
+    public PasswordRecovery(User user, String key, long timeout) {
+        this.user = user;
+        this.key = key;
+        this.timeout = timeout;
+        this.created = new Date();
+    }
+    
+    @Column(name = "pwrecoverykey", unique = true, nullable = false, length = 255)
+    @NotNull
+    @Index(name = "idx_pwrecoverykey")
+    public String getKey() {
+        return key;
+    }
+
+    public void setKey(String key) {
+        this.key = key;
+    }
+    
+    /**
+     */
+    @Column(name = "timeout")
+    @Type(type = "long")
+    public long getTimeout() {
+        return timeout;
+    }
+    
+    public void setTimeout(long timeout) {
+        this.timeout = timeout;
+    }
+
+    /**
+     */
+    @Column(name = "creationdate")
+    @Type(type="timestamp")
+    public Date getCreated() {
+        return created;
+    }
+    
+    /**
+     */
+    public void setCreated(Date created) {
+        this.created = created;
+    }
+    
+    /**
+     */
+    @ManyToOne(fetch = FetchType.LAZY)
+    @JoinColumn(name = "userid")
+    public User getUser() {
+        return user;
+    }
+    
+    /**
+     */
+    public void setUser(User user) {
+        this.user = user;
+    }
+    
+    /**
+     */
+    public boolean hasExpired() {
+        Date now = new Date();
+        return now.after(new Date(created.getTime() + timeout));
+    }
+
+    /**
+     */
+    public boolean equals(Object o) {
+        if (! (o instanceof PasswordRecovery)) {
+            return false;
+        }
+        PasswordRecovery it = (PasswordRecovery) o;
+        return new EqualsBuilder().
+            append(key, it.key).
+            append(user, it.user).
+            append(created, it.created).
+            append(timeout, it.timeout).
+            isEquals();
+    }
+
+    /**
+     */
+    public int hashCode() {
+        return new HashCodeBuilder(3, 5).
+            append(key).
+            append(user).
+            append(created).
+            append(timeout).
+            toHashCode();
+    }
+
+    /**
+     */
+    public String toString() {
+        return new ToStringBuilder(this).
+            append("key", key).
+            append("user", user).
+            append("created", created).
+            append("timeout", timeout).
+            toString();
+    }
+
+}
Index: cosmo/src/main/java/org/osaf/cosmo/service/UserService.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/service/UserService.java	(revision 3653)
+++ cosmo/src/main/java/org/osaf/cosmo/service/UserService.java	(working copy)
@@ -17,6 +17,7 @@
 
 import java.util.Set;
 
+import org.osaf.cosmo.model.PasswordRecovery;
 import org.osaf.cosmo.model.User;
 import org.osaf.cosmo.service.account.ActivationContext;
 import org.osaf.cosmo.util.PageCriteria;
@@ -156,5 +157,34 @@
      * presentation as an authentication credential.
      */
     public String generatePassword();
-
+    
+    /**
+     * Returns the PasswordRecovery entity associated with the given password recovery key.
+     * 
+     * If the specified PasswordRecovery entity has expired, returns null after removing 
+     * the PasswordRecovery object from persistant storage.
+     * 
+     * @param key the password recovery key associated with the account to return
+     * @return the User associated with key
+     * @throws DataRetrievalFailureException if there is no user associated with this
+     * activation id.
+     */
+    public PasswordRecovery getPasswordRecovery(String key);
+    
+    /**
+     * Creates a PasswordRecovery entity in the repository.
+     * 
+     * Returns a new instance of the PasswordRecovery object after saving the original.
+     * 
+     * @param passwordRecovery the PasswordRecovery object to create in the repository.
+     */
+    public PasswordRecovery createPasswordRecovery(PasswordRecovery passwordRecovery);
+    
+    /**
+     * Deletes the specified PasswordRecovery object from the repository.
+     * 
+     * @param passwordRecovery the PasswordRecovery object to delete.
+     */
+    public void deletePasswordRecovery(PasswordRecovery passwordRecovery);
+    
 }
Index: cosmo/src/main/java/org/osaf/cosmo/service/impl/StandardUserService.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/service/impl/StandardUserService.java	(revision 3653)
+++ cosmo/src/main/java/org/osaf/cosmo/service/impl/StandardUserService.java	(working copy)
@@ -28,6 +28,7 @@
 import org.osaf.cosmo.dao.ContentDao;
 import org.osaf.cosmo.dao.UserDao;
 import org.osaf.cosmo.model.CollectionItem;
+import org.osaf.cosmo.model.PasswordRecovery;
 import org.osaf.cosmo.model.User;
 import org.osaf.cosmo.service.OverlordDeletionException;
 import org.osaf.cosmo.service.UserService;
@@ -176,8 +177,6 @@
             accountActivator.sendActivationMessage(newUser, activationContext);
         }
 
-
-        // TODO Auto-generated method stub
         return newUser;
     }
 
@@ -415,4 +414,29 @@
         this.accountActivationRequired = accountActivationRequired;
     }
 
+    public PasswordRecovery getPasswordRecovery(String key) {
+        PasswordRecovery passwordRecovery = userDao.getPasswordRecovery(key);
+        
+        if (passwordRecovery != null){
+            if (passwordRecovery.hasExpired()){
+                userDao.deletePasswordRecovery(passwordRecovery);
+            } else {
+                return passwordRecovery;
+            }
+        }
+        return null;
+    }
+    
+    public PasswordRecovery createPasswordRecovery(
+                PasswordRecovery passwordRecovery){
+        
+        userDao.createPasswordRecovery(passwordRecovery);
+        
+        return userDao.getPasswordRecovery(passwordRecovery.getKey());
+    }
+    
+    public void deletePasswordRecovery(PasswordRecovery passwordRecovery){
+        userDao.deletePasswordRecovery(passwordRecovery);
+    }
+
 }
Index: cosmo/src/main/java/org/osaf/cosmo/spring/mvc/controllers/CosmoUrlFilenameViewController.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/spring/mvc/controllers/CosmoUrlFilenameViewController.java	(revision 3653)
+++ cosmo/src/main/java/org/osaf/cosmo/spring/mvc/controllers/CosmoUrlFilenameViewController.java	(working copy)
@@ -1,46 +0,0 @@
-/*
- * Copyright 2006 Open Source Applications Foundation
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.osaf.cosmo.spring.mvc.controllers;
-
-import org.springframework.web.servlet.mvc.UrlFilenameViewController;
-
-public class CosmoUrlFilenameViewController extends UrlFilenameViewController {
-	
-	
-	
-    private String COSMO_VIEW_PATH_SEPARATOR = "_";
-
-	protected String extractViewNameFromUrlPath(String uri) {
-        if (uri.startsWith("/")){
-            uri = uri.substring(1);
-        }
-        
-        int dotIndex = uri.lastIndexOf('.');
-        if (dotIndex != -1) {
-            uri = uri.substring(0, dotIndex);
-        }
-        
-        uri = uri.replace("/", COSMO_VIEW_PATH_SEPARATOR );
-        
-        if (uri.endsWith(COSMO_VIEW_PATH_SEPARATOR)){
-        	uri = uri.substring(0, uri.length() - 1);
-        	
-        }
-        
-        return uri;
-    }
-    
-}
Index: cosmo/src/main/java/org/osaf/cosmo/spring/mvc/controllers/StatusController.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/spring/mvc/controllers/StatusController.java	(revision 3653)
+++ cosmo/src/main/java/org/osaf/cosmo/spring/mvc/controllers/StatusController.java	(working copy)
@@ -1,105 +0,0 @@
-/*
- * Copyright 2005-2006 Open Source Applications Foundation
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.osaf.cosmo.spring.mvc.controllers;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-import org.osaf.cosmo.server.StatusSnapshot;
-import org.osaf.cosmo.ui.UIConstants;
-import org.springframework.web.servlet.ModelAndView;
-import org.springframework.web.servlet.mvc.multiaction.MultiActionController;
-
-/**
- * Action that provides a snapshot of the server status via
- * {@link StatusSnapshot}.
- */
-public class StatusController extends MultiActionController {
-    private static final Log log = LogFactory.getLog(StatusController.class);
-    private static final String MSG_CONFIRM_GC = "Status.GC";
-    private String dumpView;
-    private String viewView;
-    private String gcView;
-
-    /**
-     * The request attribute where the status snapshot is stored.
-     */
-    public static final String ATTR_STATUS = "Status";
-
-    /**
-     * Causes a snapshot of the server status to be taken and stored
-     * in the request underneath the {@link #ATTR_STATUS} request
-     * attribute and returns the view specified by {@link viewView}.
-     */
-    public ModelAndView view(HttpServletRequest request,
-    		HttpServletResponse response)
-    throws Exception {
-    	StatusSnapshot snapshot = takeSnapshot();
-
-    	return new ModelAndView(viewView, ATTR_STATUS, snapshot);
-    }
-    
-    /**
-     * Causes a snapshot of the server status to be taken and stored
-     * in the request underneath the {@link #ATTR_STATUS} request
-     * attribute and returns the view specified by {@link dumpView}.
-     */
-    public ModelAndView dump(HttpServletRequest request,
-    		HttpServletResponse response)
-    throws Exception {
-    	StatusSnapshot snapshot = takeSnapshot();
-
-    	return new ModelAndView(dumpView, ATTR_STATUS, snapshot);
-    }
-
-    /**
-     * Causes the JVM to begin a garbage collection run
-     * (asynchronously, in a separate thread) and forwards to the
-     * {@link UIConstants#FWD_OK} forward.
-     */
-    public ModelAndView gc(HttpServletRequest request,
-                           HttpServletResponse response)
-        throws Exception {
-        System.gc();
-
-        //saveConfirmationMessage(request, MSG_CONFIRM_GC);
-
-        return new ModelAndView(gcView);
-    }
-
-    /**
-     * Takes a snapshot of the server status.
-     */
-    protected StatusSnapshot takeSnapshot() {
-        return new StatusSnapshot();
-    }
-
-	public void setDumpView(String dumpView) {
-		this.dumpView = dumpView;
-	}
-
-	public void setGcView(String gcView) {
-		this.gcView = gcView;
-	}
-
-	public void setViewView(String viewView) {
-		this.viewView = viewView;
-	}
-
-}
Index: cosmo/src/main/java/org/osaf/cosmo/spring/mvc/controllers/CredentialsReminderFormController.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/spring/mvc/controllers/CredentialsReminderFormController.java	(revision 3653)
+++ cosmo/src/main/java/org/osaf/cosmo/spring/mvc/controllers/CredentialsReminderFormController.java	(working copy)
@@ -1,210 +0,0 @@
-/*
- * Copyright 2005-2006 Open Source Applications Foundation
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *     http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.osaf.cosmo.spring.mvc.controllers;
-
-import java.util.Locale;
-import javax.mail.MessagingException;
-import javax.mail.internet.MimeMessage;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-import org.osaf.cosmo.CosmoConstants;
-import org.osaf.cosmo.model.User;
-import org.osaf.cosmo.security.CosmoSecurityManager;
-import org.osaf.cosmo.service.UserService;
-import org.osaf.cosmo.ui.UIConstants;
-
-import org.springframework.web.servlet.mvc.SimpleFormController;
-
-import org.springframework.dao.DataRetrievalFailureException;
-import org.springframework.mail.javamail.JavaMailSender;
-import org.springframework.mail.javamail.MimeMessagePreparator;
-import org.springframework.mail.javamail.MimeMessageHelper;
-
-/**
- * A {@link CosmoAction} that generates email reminders for forgotten
- * usernames and passwords.
- */
-public class CredentialsReminderFormController extends SimpleFormController {
-    private static final Log log =
-        LogFactory.getLog(CredentialsReminderFormController.class);
-
-    private static final String FORM_EMAIL = "email";
-    private static final String FORM_BUTTON_USERNAME = "username";
-    private static final String FORM_BUTTON_PASSWORD = "password";
-    private static final String MSG_ERROR_EMAIL_NOT_FOUND =
-        "Forgot.Error.EmailNotFound";
-    private static final String MSG_CONFIRM_USERNAME =
-        "Forgot.Confirm.Username";
-    private static final String MSG_CONFIRM_PASSWORD =
-        "Forgot.Confirm.Password";
-    private static final String MSG_USERNAME_REMINDER_FROMHANDLE =
-        "Email.UsernameReminder.FromHandle";
-    private static final String MSG_USERNAME_REMINDER_SUBJECT =
-        "Email.UsernameReminder.Subject";
-    private static final String MSG_USERNAME_REMINDER_TEXT =
-        "Email.UsernameReminder.Text";
-    private static final String MSG_PASSWORD_RESET_FROMHANDLE =
-        "Email.PasswordReset.FromHandle";
-    private static final String MSG_PASSWORD_RESET_SUBJECT =
-        "Email.PasswordReset.Subject";
-    private static final String MSG_PASSWORD_RESET_TEXT =
-        "Email.PasswordReset.Text";
-
-    private JavaMailSender mailSender;
-    private UserService userService;
-
-    /**
-     */
-    public void setMailSender(JavaMailSender mailSender) {
-        this.mailSender = mailSender;
-    }
-
-    /**
-     */
-    public void setUserService(UserService userService) {
-        this.userService = userService;
-    }
-
-    /**
-     * Looks up the user for the entered email address and:
-     *
-     * <ul>
-     * <li> If the username button was clicked, sends a reminder email
-     * containing the username to the user's email address
-     * <li> If the password button was clicked, reset's the user's
-     * password and sends a confirmation email containing the new
-     * password to the user's email address
-     * </ul>
-     *
-     * @see UIConstants#FWD_OK
-     *
-    public ActionForward execute(ActionMapping mapping,
-                                 ActionForm form,
-                                 HttpServletRequest request,
-                                 HttpServletResponse response)
-        throws Exception {
-        BeanValidatorForm forgotForm = (BeanValidatorForm) form;
-        String email = (String) forgotForm.get(FORM_EMAIL);
-        User user = null;
-        try {
-            user = userService.getUserByEmail(email);
-        } catch (DataRetrievalFailureException e) {
-            saveErrorMessage(request, MSG_ERROR_EMAIL_NOT_FOUND);
-            return mapping.findForward(UIConstants.FWD_FAILURE);
-        }
-
-        if (wasUsernameButtonClicked(forgotForm)) {
-            sendUsernameReminderMessage(request, response, user);
-            saveConfirmationMessage(request, MSG_CONFIRM_USERNAME);
-        }
-        if (wasPasswordButtonClicked(forgotForm)) {
-            String newPassword = userService.generatePassword();
-            user.setPassword(newPassword);
-            userService.updateUser(user);
-            sendPasswordResetMessage(request, response, user, newPassword);
-            saveConfirmationMessage(request, MSG_CONFIRM_PASSWORD);
-        }
-
-        return mapping.findForward(UIConstants.FWD_OK);
-    }
-
-    public boolean wasUsernameButtonClicked(BeanValidatorForm form) {
-        return form.get(FORM_BUTTON_USERNAME) != null;
-    }
-
-    public boolean wasPasswordButtonClicked(BeanValidatorForm form) {
-        return form.get(FORM_BUTTON_PASSWORD) != null;
-    }
-
-    private void sendUsernameReminderMessage(final HttpServletRequest request,
-                                             final HttpServletResponse response,
-                                             final User user) {
-        mailSender.send(new MimeMessagePreparator() {
-                public void prepare(MimeMessage mimeMessage)
-                    throws MessagingException {
-                    MessageResources resources = getResources(request);
-                    Locale locale = getLocale(request);
-
-                    User rootUser = userService.getUser(User.USERNAME_OVERLORD);
-                    String fromAddr = (String) getServlet().getServletContext().
-                        getAttribute(CosmoConstants.SC_ATTR_SERVER_ADMIN);
-                    String fromHandle =
-                        resources.getMessage(locale,
-                                             MSG_USERNAME_REMINDER_FROMHANDLE);
-                    String subject =
-                        resources.getMessage(locale,
-                                             MSG_USERNAME_REMINDER_SUBJECT);
-                    String text =
-                        resources.getMessage(locale,
-                                             MSG_USERNAME_REMINDER_TEXT,
-                                             user.getUsername(),
-                                             getContextRelativeURL(request,
-                                                                   "/"),
-                                             rootUser.getEmail());
-
-                    MimeMessageHelper message =
-                        new MimeMessageHelper(mimeMessage);
-                    message.setFrom("\"" + fromHandle + "\" <" + fromAddr +
-                                    ">");
-                    message.setTo(user.getEmail());
-                    message.setSubject(subject);
-                    message.setText(text);
-                }
-            });
-    }
-
-    private void sendPasswordResetMessage(final HttpServletRequest request,
-                                          final HttpServletResponse response,
-                                          final User user,
-                                          final String newPassword) {
-        mailSender.send(new MimeMessagePreparator() {
-                public void prepare(MimeMessage mimeMessage)
-                    throws MessagingException {
-                    MessageResources resources = getResources(request);
-                    Locale locale = getLocale(request);
-
-                    User rootUser = userService.getUser(User.USERNAME_OVERLORD);
-                    String fromAddr = (String) getServlet().getServletContext().
-                        getAttribute(CosmoConstants.SC_ATTR_SERVER_ADMIN);
-                    String fromHandle =
-                        resources.getMessage(locale,
-                                             MSG_PASSWORD_RESET_FROMHANDLE);
-                    String subject =
-                        resources.getMessage(locale,
-                                             MSG_PASSWORD_RESET_SUBJECT);
-                    String text =
-                        resources.getMessage(locale,
-                                             MSG_PASSWORD_RESET_TEXT,
-                                             newPassword,
-                                             getContextRelativeURL(request,
-                                                                   "/"),
-                                             rootUser.getEmail());
-
-                    MimeMessageHelper message =
-                        new MimeMessageHelper(mimeMessage);
-                    message.setFrom("\"" + fromHandle + "\" <" + fromAddr +
-                                    ">");
-                    message.setTo(user.getEmail());
-                    message.setSubject(subject);
-                    message.setText(text);
-                }
-            });
-    }*/
-}
Index: cosmo/src/main/java/org/osaf/cosmo/dao/hibernate/UserDaoImpl.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/dao/hibernate/UserDaoImpl.java	(revision 3653)
+++ cosmo/src/main/java/org/osaf/cosmo/dao/hibernate/UserDaoImpl.java	(working copy)
@@ -33,6 +33,7 @@
 import org.osaf.cosmo.dao.UserDao;
 import org.osaf.cosmo.model.DuplicateEmailException;
 import org.osaf.cosmo.model.DuplicateUsernameException;
+import org.osaf.cosmo.model.PasswordRecovery;
 import org.osaf.cosmo.model.User;
 import org.osaf.cosmo.util.ArrayPagedList;
 import org.osaf.cosmo.util.PageCriteria;
@@ -196,6 +197,30 @@
             throw SessionFactoryUtils.convertHibernateAccessException(e);
         }
     }
+    
+    public void createPasswordRecovery(PasswordRecovery passwordRecovery){
+        
+        getSession().save(passwordRecovery);
+    }
+    
+    public PasswordRecovery getPasswordRecovery(String key){
+        try {
+            Query hibQuery = getSession().getNamedQuery("passwordRecovery.byKey")
+                    .setParameter("key", key);
+            hibQuery.setCacheable(true);
+            return (PasswordRecovery) hibQuery.uniqueResult();
+        } catch (HibernateException e) {
+            throw SessionFactoryUtils.convertHibernateAccessException(e);
+        }
+    }
+    
+    public void deletePasswordRecovery(PasswordRecovery passwordRecovery) {
+        try {
+            getSession().delete(passwordRecovery);
+        } catch (HibernateException e) {
+            throw SessionFactoryUtils.convertHibernateAccessException(e);
+        }
+    }
 
     public void destroy() {
         // TODO Auto-generated method stub
@@ -302,6 +327,8 @@
                 orders.add(createOrder(pageCriteria, "dateCreated"));
             else if (sort.equals(User.SortType.LAST_MODIFIED))
                 orders.add(createOrder(pageCriteria, "dateModified"));
+            else if (sort.equals(User.SortType.ACTIVATED))
+                orders.add(createOrder(pageCriteria, "activationId"));
             else
                 orders.add(createOrder(pageCriteria, "username"));
 
@@ -314,5 +341,4 @@
                    Order.desc(property);
         }
     }
-
 }
Index: cosmo/src/main/java/org/osaf/cosmo/dao/UserDao.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/dao/UserDao.java	(revision 3653)
+++ cosmo/src/main/java/org/osaf/cosmo/dao/UserDao.java	(working copy)
@@ -15,6 +15,7 @@
  */
 package org.osaf.cosmo.dao;
 
+import org.osaf.cosmo.model.PasswordRecovery;
 import org.osaf.cosmo.model.User;
 import org.osaf.cosmo.util.PageCriteria;
 import org.osaf.cosmo.util.PagedList;
@@ -127,4 +128,27 @@
      * @param user the user to remove
      */
     public void removeUser(User user);
+    
+    /**
+     * Creates a password recovery entity in the repository. Returns a new
+     * instance of <code>PasswordRecovery</code> after saving the original one.
+     *
+     * @param passwordRecovery the password recovery entity to save
+     */
+    public void createPasswordRecovery(PasswordRecovery passwordRecovery);
+    
+    /**
+     * Returns the password recovery entity identified by the given key.
+     * 
+     * @param key
+     * @return the passsword recovery entity identified by key
+     */
+    public PasswordRecovery getPasswordRecovery(String key);
+    
+    /**
+     * Delete <code>passwordRecovery</code> from the database.
+     * 
+     * @param passwordRecovery the password recovery entity to delete
+     */
+    public void deletePasswordRecovery(PasswordRecovery passwordRecovery);
 }
Index: cosmo/src/main/java/org/osaf/cosmo/ui/admin/StatusController.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/ui/admin/StatusController.java	(revision 0)
+++ cosmo/src/main/java/org/osaf/cosmo/ui/admin/StatusController.java	(revision 3934)
@@ -0,0 +1,105 @@
+/*
+ * Copyright 2005-2006 Open Source Applications Foundation
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.osaf.cosmo.ui.admin;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import org.osaf.cosmo.server.StatusSnapshot;
+import org.osaf.cosmo.ui.UIConstants;
+import org.springframework.web.servlet.ModelAndView;
+import org.springframework.web.servlet.mvc.multiaction.MultiActionController;
+
+/**
+ * Action that provides a snapshot of the server status via
+ * {@link StatusSnapshot}.
+ */
+public class StatusController extends MultiActionController {
+    private static final Log log = LogFactory.getLog(StatusController.class);
+    private static final String MSG_CONFIRM_GC = "Status.GC";
+    private String dumpView;
+    private String viewView;
+    private String gcView;
+
+    /**
+     * The request attribute where the status snapshot is stored.
+     */
+    public static final String ATTR_STATUS = "Status";
+
+    /**
+     * Causes a snapshot of the server status to be taken and stored
+     * in the request underneath the {@link #ATTR_STATUS} request
+     * attribute and returns the view specified by {@link viewView}.
+     */
+    public ModelAndView view(HttpServletRequest request,
+    		HttpServletResponse response)
+    throws Exception {
+    	StatusSnapshot snapshot = takeSnapshot();
+
+    	return new ModelAndView(viewView, ATTR_STATUS, snapshot);
+    }
+    
+    /**
+     * Causes a snapshot of the server status to be taken and stored
+     * in the request underneath the {@link #ATTR_STATUS} request
+     * attribute and returns the view specified by {@link dumpView}.
+     */
+    public ModelAndView dump(HttpServletRequest request,
+    		HttpServletResponse response)
+    throws Exception {
+    	StatusSnapshot snapshot = takeSnapshot();
+
+    	return new ModelAndView(dumpView, ATTR_STATUS, snapshot);
+    }
+
+    /**
+     * Causes the JVM to begin a garbage collection run
+     * (asynchronously, in a separate thread) and forwards to the
+     * {@link UIConstants#FWD_OK} forward.
+     */
+    public ModelAndView gc(HttpServletRequest request,
+                           HttpServletResponse response)
+        throws Exception {
+        System.gc();
+
+        //saveConfirmationMessage(request, MSG_CONFIRM_GC);
+
+        return new ModelAndView(gcView);
+    }
+
+    /**
+     * Takes a snapshot of the server status.
+     */
+    protected StatusSnapshot takeSnapshot() {
+        return new StatusSnapshot();
+    }
+
+	public void setDumpView(String dumpView) {
+		this.dumpView = dumpView;
+	}
+
+	public void setGcView(String gcView) {
+		this.gcView = gcView;
+	}
+
+	public void setViewView(String viewView) {
+		this.viewView = viewView;
+	}
+
+}
Index: cosmo/src/main/java/org/osaf/cosmo/ui/account/CredentialsReminderFormController.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/ui/account/CredentialsReminderFormController.java	(revision 0)
+++ cosmo/src/main/java/org/osaf/cosmo/ui/account/CredentialsReminderFormController.java	(revision 3934)
@@ -0,0 +1,208 @@
+/*
+ * Copyright 2005-2006 Open Source Applications Foundation
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.osaf.cosmo.ui.account;
+
+import java.util.Locale;
+import javax.mail.MessagingException;
+import javax.mail.internet.MimeMessage;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import org.osaf.cosmo.CosmoConstants;
+import org.osaf.cosmo.model.User;
+import org.osaf.cosmo.security.CosmoSecurityManager;
+import org.osaf.cosmo.service.UserService;
+import org.osaf.cosmo.ui.UIConstants;
+
+import org.springframework.web.servlet.mvc.SimpleFormController;
+
+import org.springframework.context.support.ResourceBundleMessageSource;
+import org.springframework.dao.DataRetrievalFailureException;
+import org.springframework.mail.javamail.JavaMailSender;
+import org.springframework.mail.javamail.MimeMessagePreparator;
+import org.springframework.mail.javamail.MimeMessageHelper;
+
+/**
+ * A {@link CosmoAction} that generates email reminders for forgotten
+ * usernames and passwords.
+ */
+public class CredentialsReminderFormController extends SimpleFormController {
+    private static final Log log =
+        LogFactory.getLog(CredentialsReminderFormController.class);
+
+    private static final String FORM_EMAIL = "email";
+    private static final String FORM_BUTTON_USERNAME = "username";
+    private static final String FORM_BUTTON_PASSWORD = "password";
+    private static final String MSG_ERROR_EMAIL_NOT_FOUND =
+        "Forgot.Error.EmailNotFound";
+    private static final String MSG_CONFIRM_USERNAME =
+        "Forgot.Confirm.Username";
+    private static final String MSG_CONFIRM_PASSWORD =
+        "Forgot.Confirm.Password";
+    private static final String MSG_USERNAME_REMINDER_FROMHANDLE =
+        "Email.UsernameReminder.FromHandle";
+    private static final String MSG_USERNAME_REMINDER_SUBJECT =
+        "Email.UsernameReminder.Subject";
+    private static final String MSG_USERNAME_REMINDER_TEXT =
+        "Email.UsernameReminder.Text";
+    private static final String MSG_PASSWORD_RESET_FROMHANDLE =
+        "Email.PasswordReset.FromHandle";
+    private static final String MSG_PASSWORD_RESET_SUBJECT =
+        "Email.PasswordReset.Subject";
+    private static final String MSG_PASSWORD_RESET_TEXT =
+        "Email.PasswordReset.Text";
+    
+    private ResourceBundleMessageSource messageSource;
+
+    private JavaMailSender mailSender;
+    private UserService userService;
+
+    /**
+     */
+    public void setMailSender(JavaMailSender mailSender) {
+        this.mailSender = mailSender;
+    }
+
+    /**
+     */
+    public void setUserService(UserService userService) {
+        this.userService = userService;
+    }
+
+    /**
+     * Looks up the user for the entered email address and:
+     *
+     * <ul>
+     * <li> If the username button was clicked, sends a reminder email
+     * containing the username to the user's email address
+     * <li> If the password button was clicked, reset's the user's
+     * password and sends a confirmation email containing the new
+     * password to the user's email address
+     * </ul>
+     *
+     * @see UIConstants#FWD_OK
+     *
+    public ModelAndView handleRequestInternal(HttpServletRequest request,
+                                              HttpServletResponse response) throws Exception {
+
+        throws Exception {
+        BeanValidatorForm forgotForm = (BeanValidatorForm) form;
+        String email = (String) forgotForm.get(FORM_EMAIL);
+        User user = null;
+        try {
+            user = userService.getUserByEmail(email);
+        } catch (DataRetrievalFailureException e) {
+            saveErrorMessage(request, MSG_ERROR_EMAIL_NOT_FOUND);
+            return mapping.findForward(UIConstants.FWD_FAILURE);
+        }
+
+        if (wasUsernameButtonClicked(forgotForm)) {
+            sendUsernameReminderMessage(request, response, user);
+            saveConfirmationMessage(request, MSG_CONFIRM_USERNAME);
+        }
+        if (wasPasswordButtonClicked(forgotForm)) {
+            String newPassword = userService.generatePassword();
+            user.setPassword(newPassword);
+            userService.updateUser(user);
+            sendPasswordResetMessage(request, response, user, newPassword);
+            saveConfirmationMessage(request, MSG_CONFIRM_PASSWORD);
+        }
+
+        return mapping.findForward(UIConstants.FWD_OK);
+    }
+
+    public boolean wasUsernameButtonClicked(BeanValidatorForm form) {
+        return form.get(FORM_BUTTON_USERNAME) != null;
+    }
+
+    public boolean wasPasswordButtonClicked(BeanValidatorForm form) {
+        return form.get(FORM_BUTTON_PASSWORD) != null;
+    }
+
+    private void sendUsernameReminderMessage(final HttpServletRequest request,
+                                             final HttpServletResponse response,
+                                             final User user) {
+        mailSender.send(new MimeMessagePreparator() {
+                public void prepare(MimeMessage mimeMessage)
+                    throws MessagingException {
+                    MessageResources resources = getResources(request);
+                    Locale locale = getLocale(request);
+
+                    User rootUser = userService.getUser(User.USERNAME_OVERLORD);
+                    String fromAddr = (String) getServlet().getServletContext().
+                        getAttribute(CosmoConstants.SC_ATTR_SERVER_ADMIN);
+                    String fromHandle =
+                        resources.getMessage(locale,
+                                             MSG_USERNAME_REMINDER_FROMHANDLE);
+                    String subject =
+                        resources.getMessage(locale,
+                                             MSG_USERNAME_REMINDER_SUBJECT);
+                    String text =
+                        resources.getMessage(locale,
+                                             MSG_USERNAME_REMINDER_TEXT,
+                                             user.getUsername(),
+                                             getContextRelativeURL(request,
+                                                                   "/"),
+                                             rootUser.getEmail());
+
+                    MimeMessageHelper message =
+                        new MimeMessageHelper(mimeMessage);
+                    message.setFrom("\"" + fromHandle + "\" <" + fromAddr +
+                                    ">");
+                    message.setTo(user.getEmail());
+                    message.setSubject(subject);
+                    message.setText(text);
+                }
+            });
+    }
+*/
+    private void sendPasswordResetMessage(final HttpServletRequest request,
+                                          final HttpServletResponse response,
+                                          final User user,
+                                          final String newPassword) {
+        mailSender.send(new MimeMessagePreparator() {
+                public void prepare(MimeMessage mimeMessage)
+                    throws MessagingException {
+                    Locale locale = request.getLocale();
+
+                    User rootUser = userService.getUser(User.USERNAME_OVERLORD);
+                    String fromAddr = rootUser.getEmail();
+                    String fromHandle =
+                        messageSource.getMessage(
+                                             MSG_PASSWORD_RESET_FROMHANDLE, new Object[]{}, locale);
+                    
+                    String subject =
+                        messageSource.getMessage(MSG_PASSWORD_RESET_SUBJECT, new Object[]{},locale);
+                    String text =
+                        messageSource.getMessage(MSG_PASSWORD_RESET_TEXT,
+                                new Object[] {newPassword,
+                                              request.getContextPath(),
+                                              rootUser.getEmail()},
+                                locale);
+                    MimeMessageHelper message =
+                        new MimeMessageHelper(mimeMessage);
+                    message.setFrom("\"" + fromHandle + "\" <" + fromAddr +
+                                    ">");
+                    message.setTo(user.getEmail());
+                    message.setSubject(subject);
+                    message.setText(text);
+                }
+            });
+    }
+}
Index: cosmo/src/main/java/org/osaf/cosmo/ui/CosmoUrlFilenameViewController.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/ui/CosmoUrlFilenameViewController.java	(revision 0)
+++ cosmo/src/main/java/org/osaf/cosmo/ui/CosmoUrlFilenameViewController.java	(revision 3934)
@@ -0,0 +1,53 @@
+/*
+ * Copyright 2006 Open Source Applications Foundation
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.osaf.cosmo.ui;
+
+import org.springframework.web.servlet.mvc.UrlFilenameViewController;
+
+/**
+ * Default controller that attempts to find a jsp at a path specified
+ * by transforming _ characters in the view name to /
+ * 
+ * For example, the view x_y_z would resolve to a file at x/y/z
+ * 
+ * @author Travis Vachon travis@osafoundation.org
+ *
+ */
+public class CosmoUrlFilenameViewController extends UrlFilenameViewController {
+	
+    private String COSMO_VIEW_PATH_SEPARATOR = "_";
+
+	protected String extractViewNameFromUrlPath(String uri) {
+        if (uri.startsWith("/")){
+            uri = uri.substring(1);
+        }
+        
+        int dotIndex = uri.lastIndexOf('.');
+        if (dotIndex != -1) {
+            uri = uri.substring(0, dotIndex);
+        }
+        
+        uri = uri.replace("/", COSMO_VIEW_PATH_SEPARATOR );
+        
+        if (uri.endsWith(COSMO_VIEW_PATH_SEPARATOR)){
+        	uri = uri.substring(0, uri.length() - 1);
+        	
+        }
+        
+        return uri;
+    }
+    
+}
Index: cosmo/src/main/resources/PimMessageResources.properties
===================================================================
--- cosmo/src/main/resources/PimMessageResources.properties	(revision 3653)
+++ cosmo/src/main/resources/PimMessageResources.properties	(working copy)
@@ -220,13 +220,10 @@
 Main.CollectionDetails.atom=Atom
 Main.CollectionDetails.protocolInstructions=Subscribe with the appropriate URL below.
 Main.CollectionDetails.Save=Save
-Main.CollectionDetails.ChandlerDownloadUrl=http://chandler.osafoundation.org/downloadchandler.php
-Main.CollectionDetails.ChandlerUrl=http://chandler.osafoundation.org/
 Main.CollectionDetails.Help=Help
-Main.CollectionDetails.DownloadHere=DOWNLOAD HERE
-Main.CollectionDetails.DontHave=Don't Have
 Main.CollectionDetails.ClickHere=Click Here
 Main.CollectionDetails.HelpLink=http://wiki.osafoundation.org/Projects/CosmoHelpPortal06
+Main.CollectionDetails.ChandlerPlug=Don't Have Chandler? {0}Download Here{1}.
 Main.CollectionDetails.LinkImageToolTip=Link to '{0}'
 
 Ticket.Error.Privilege=You must select a privilege.
Index: cosmo/src/main/resources/applicationContext.xml
===================================================================
--- cosmo/src/main/resources/applicationContext.xml	(revision 3653)
+++ cosmo/src/main/resources/applicationContext.xml	(working copy)
@@ -126,6 +126,7 @@
             <value>org.osaf.cosmo.model.Ticket</value>
             <value>org.osaf.cosmo.model.TimestampAttribute</value>
             <value>org.osaf.cosmo.model.User</value>
+            <value>org.osaf.cosmo.model.PasswordRecovery</value>
         </list>
     </property>
     <property name="entityInterceptor">
Index: cosmo/src/main/webapp/WEB-INF/springDispatcherServlet-servlet.xml
===================================================================
--- cosmo/src/main/webapp/WEB-INF/springDispatcherServlet-servlet.xml	(revision 3653)
+++ cosmo/src/main/webapp/WEB-INF/springDispatcherServlet-servlet.xml	(working copy)
@@ -82,7 +82,7 @@
 <!-- TODO set cache settings here.... -->
 <bean id="i18nController" class="org.osaf.cosmo.spring.mvc.InternationalizationController" />
 
-<bean id="jspViewController" class="org.osaf.cosmo.spring.mvc.controllers.CosmoUrlFilenameViewController"> 
+<bean id="jspViewController" class="org.osaf.cosmo.ui.CosmoUrlFilenameViewController"> 
 	<property name="alwaysUseFullPath">
 		<value>true</value>
     </property>
@@ -125,7 +125,7 @@
 <bean id="internalPathMethodNameResolver" class="org.springframework.web.servlet.mvc.multiaction.InternalPathMethodNameResolver">
 </bean>
 
-<bean id="statusController" class="org.osaf.cosmo.spring.mvc.controllers.StatusController">
+<bean id="statusController" class="org.osaf.cosmo.ui.admin.StatusController">
 	<property name="methodNameResolver"><ref bean="internalPathMethodNameResolver"/></property>
 	<property name="dumpView"><value>admin_status_dump</value></property>
 	<property name="viewView"><value>admin_status_view</value></property>
Index: cosmo/src/main/webapp/js/cosmo/account/settings.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/account/settings.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/account/settings.js	(working copy)
@@ -267,10 +267,11 @@
         var form = _createElem('form');
         var div = _createElem('div');
         var nbsp = function () { return cosmo.util.html.nbsp(); };
+        var prefs = cosmo.account.preferences.getPreferences();
+        var checkedDefault = (prefs[cosmo.account.preferences.SHOW_ACCOUNT_BROWSER_LINK] == 'true');
         var check = cosmo.util.html.createInput({ type: 'checkbox', 
             id: 'showAccountBrowser', name: 'showAccountBrowser',  
-            value: '' });
-        var prefs = cosmo.account.preferences.getPreferences();
+            value: '', checked: checkedDefault });
         
         div.appendChild(check);
         div.appendChild(nbsp());
@@ -284,9 +285,6 @@
             cosmo.util.html.addInputsToForm([check], form);
         }
 
-        form.showAccountBrowser.checked = 
-            (prefs[cosmo.account.preferences.SHOW_ACCOUNT_BROWSER_LINK] 
-            == "true");
         return form;
     };
     
Index: cosmo/src/main/webapp/js/cosmo/view/cal/dialog.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/view/cal/dialog.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/view/cal/dialog.js	(working copy)
@@ -128,10 +128,9 @@
     this.getProps = function(key, optsParam) {
         var p = props[key]();
         var opts = optsParam || {};
-        var instanceOnly = opts.instanceOnly || false;
         if (key == 'saveRecurConfirm') {
             p.btnsRight = [];
-            if (instanceOnly) {
+            if (opts.instanceOnly || opts.recurrenceMod) {
                 p.btnsRight.push(buttons.allEventsDisabled());
                 p.btnsRight.push(buttons.saveFutureEvents());
             }
Index: cosmo/src/main/webapp/js/cosmo/view/cal.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/view/cal.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/view/cal.js	(working copy)
@@ -121,6 +121,7 @@
                 var opts = {};
                 opts.instanceOnly = false;
                 opts.masterEvent = false;
+                opts.recurrenceMod = false;
 
                 // Check to see if editing a recurrence instance to go
                 // beyond the recurrence interval -- in that case, the
@@ -138,6 +139,26 @@
                     ret = (diff >= bound || diff <= (bound * -1)) ? true : false;
                     return ret;
                 }
+                // There ought to be a better way to do this -- figure out if
+                // this event is a recurrence mod by poking through the 
+                // modifications array and seeing if its start date matches
+                // any of the existing mods' instanceDates
+                function isRecurrenceMod() {
+                    var ret = false;
+                    var mods = recur.modifications;
+                    var evDt = ev.data.instanceDate.getTime();
+                    if (mods && mods.length) {
+                        for (var i = 0; i < mods.length; i++) {
+                            var modDt = mods[i].instanceDate.getTime();
+                            if (modDt == evDt) {
+                                ret = true;
+                                break;
+                            }
+                        }
+                    }
+                    return ret;
+                }
+                
                 // Change to master event in recurrence
                 if (ev.data.masterEvent) {
                     opts.masterEvent = true;
@@ -146,6 +167,9 @@
                 else {
                     opts.instanceOnly = isOutOfIntervalRange();
                 }
+                
+                opts.recurrenceMod = isRecurrenceMod();
+
                 // Show the confirmation dialog
                 cosmo.app.showDialog(cosmo.view.cal.dialog.getProps('saveRecurConfirm', opts));
             }
Index: cosmo/src/main/webapp/js/cosmo/util/html.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/util/html.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/util/html.js	(working copy)
@@ -120,12 +120,12 @@
         }
         appendElem = parentNode;
     }
-
+    
     // IE falls down on DOM-method-generated
     // radio buttons and checkboxes
     // Old-skool with conditional branching and innerHTML
-    if (document.all && (type == 'radio' || type == 'checkbox')) {
-        str = '<input type="' + type + '"' +
+    if (document.all && (o.type == 'radio' || o.type == 'checkbox')) {
+        str = '<input type="' + o.type + '"' +
             ' name="' + o.name + '"' +
             ' id ="' + o.id + '"';
         if (o.size) {
@@ -134,10 +134,14 @@
         if (o.maxlength) {
             str += ' maxlength="' + o.maxlength + '"';
         }
+        if (o.checked) {
+            str += ' checked="checked"';
+        }
         if (o.className) {
             str += ' class="' + o.className + '"';
         }
-        str += '>';
+        str += '/>';
+        
         var s = document.createElement('span');
         s.innerHTML = str;
         input = s.firstChild;
Index: cosmo/src/main/webapp/js/cosmo/ui/widget/AuthBox.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/ui/widget/AuthBox.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/ui/widget/AuthBox.js	(working copy)
@@ -32,41 +32,51 @@
         _showPrompt: function (str, type) {
             cosmo.app.modalDialog.setPrompt(str, type);
         },
-        _handleAuthResp: function (str) {
-
-            // Auth failed -- bad password? Reset for retry
-            if (str == cosmo.env.getBaseUrl() + "/loginfailed"){
-                this._showErr(_('Login.Error.AuthFailed'));
-                this.passwordInput.value = '';
+        _handleAuthResp: function (type, data, obj) {
+            var str = data;
+            // Transport error
+            if (type == 'error') {
+                cosmo.app.hideDialog();
+                cosmo.app.showErr(data.message);
+                return false;
             }
-            // Auth successful -- try to do whatever action
-            // was contingent on the auth
+            // Request succeeded
             else {
-                cosmo.util.auth.setCred(this.usernameInput.value, 
-                                        this.passwordInput.value);
-                                        
-                this.attemptAuthAction(this.authAction.attemptParams);
+                // Auth failed -- bad password? Reset for retry
+                if (str == cosmo.env.getBaseUrl() + "/loginfailed"){
+                    this._showErr(_('Login.Error.AuthFailed'));
+                    this.passwordInput.value = '';
+                }
+                // Auth successful -- try to do whatever action
+                // was contingent on the auth
+                else {
+                    cosmo.util.auth.setCred(this.usernameInput.value, 
+                                            this.passwordInput.value);
+                                            
+                    this.attemptAuthAction(this.authAction.attemptParams);
+                }
             }
         },
         _attemptOrHandle: function (type, args) {
             var res = null;
-            // If this is just a plain ol' function, execute it inline here
+            var f = this.authAction[type + 'Func'];
+            var a = args || []; // Can't pass args to IE6 if it's undefined
+            var context = null;
+            // If this is just a plain ol' function, execute in window context 
             if (this.authAction.execInline) {
-                res = this.authAction[type + 'Func'].apply(null, args);
+                context = window;
             }
-            // Otherwise it's a method to execute in an obj context 
+            // If execution context got passed in, apply the method
+            // to that object
+            else if (this.authAction.execContext) {
+                context = this.authAction.execContext;
+            }
+            // No execution context -- execute the method in the
+            // context of the AuthBox itself
             else {
-                // If execution context got passed in, apply the method
-                // to that object
-                if (this.authAction.execContext) {
-                    res = this.authAction[type + 'Func'].apply(this.authAction.execContext, args);
-                }
-                // No execution context -- execute the method in the
-                // context of the AuthBox itself
-                else {
-                    res = this.authAction[type + 'Func'].apply(this, args);
-                }
+                context = this;
             }
+            res = f.apply(context, a);
             return res;
         },
         attemptAuthAction: function (args) {
@@ -112,8 +122,8 @@
                     url: self.authProc,
                     method: 'POST',
                     content: postData,
-                    load: function(type, data, obj) { self._handleAuthResp(data); },
-                    error: function(type, error) { alert(error.message); }
+                    load: function(type, data, obj) { self._handleAuthResp(type, data, obj); },
+                    error: function(type, data, obj) { self._handleAuthResp(type, data, obj); }
                 });
             }
             return false;
Index: cosmo/src/main/webapp/js/cosmo/ui/widget/Button.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/ui/widget/Button.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/ui/widget/Button.js	(working copy)
@@ -17,8 +17,7 @@
 /**
  * @fileoverview Button - creates a push button that can be enabled or disabled, small or 
  *                        normal size.
- *                        Adapated from mde's button.js code.
- * @author Bobby Rullo br@osafoundation.org
+ * @authors: Matthew Eernisse (mde@osafoundation.org), Bobby Rullo (br@osafoundation.org)
  * @license Apache License 2.0
  */
 
@@ -30,132 +29,90 @@
 dojo.require("cosmo.env");
 
 dojo.widget.defineWidget("cosmo.ui.widget.Button", dojo.widget.HtmlWidget, {
-    //Constants
-    DISABLED_TABLE_OPACITY : 0.6,
-
-    buttonDirectory: cosmo.env.getImagesUrl(), 
-    templatePath: dojo.uri.dojoUri( "../../cosmo/ui/widget/templates/Button/Button.html"),
     
-    //attach points
-    leftContainer: null,
-    centerContainer: null,
-    rightContainer: null,
-    buttonTextContainer : null,
-    tableContainer : null,
-    
-    //properties to be set by tag or constructor
+    // Constants
+    DISABLED_OPACITY : 0.8,
+    templateString: '<input type="button" />',
+
+    // Properties to be set by tag or constructor
     enabled: true,
     small: false,
     text: "",
     width: 0,
     handleOnClick: "",
-    
+
     fillInTemplate: function() {
-         if (typeof(this.handleOnClick) == "string") {
-             eval("this.handleOnClick = function() {" + this.handleOnClick + ";}");
-         }
-         this.setText(this.text);
-         this.setWidth(this.width);
-         this.setEnabled(this.enabled);
+        if (typeof(this.handleOnClick) == "string") {
+         eval("this.handleOnClick = function() {" + this.handleOnClick + ";}");
+        }
+        // Mouse effects and onclick
+        this._attachHandlers();
+        // DOM handles
+        this.domNode.id = this.widgetId;
+        this.domNode.name = this.widgetId;
+        // Finish setting up
+        this.setText(this.text);
+        this.setWidth(this.width);
+        this.setEnabled(this.enabled);
     },
     setText: function(text) {
         this.text = text;
-        var textNode = document.createTextNode(text);
-        if (this.buttonTextContainer.hasChildNodes) {
-		    dojo.dom.removeChildren(this.buttonTextContainer);
-		}
-		this.buttonTextContainer.appendChild(textNode);
+        this.domNode.value = this.text;
     },
+    // Default width already set in CSS -- this overrides it
     setWidth: function(width) {
         this.width = width;
-		if (width) {
-        	this.tableContainer.style.width = parseInt(width) + "px";
-        } else {
-        	this.tableContainer.style.width = null;
-        }
+        if (this.width) {
+            this.domNode.style.width = parseInt(width) + "px";
+        } 
     },
     setEnabled: function(enabled) {
+        var suf = this.small ? 'Sm' : '';
         this.enabled = enabled;
-        if (enabled) {
+        if (this.enabled) {
             if (this.handleOnClickOrig) {
                 this.handleOnClick = this.handleOnClickOrig;
             }
-            this.leftContainer.style.cursor = 'pointer';
-            this.centerContainer.style.cursor = 'pointer';
-            this.rightContainer.style.cursor = 'pointer';
-            this._setTableOpacity(1.0) 
+            this.domNode.className = 'btnElemBase' + suf;
+            this._setOpacity(1.0) 
             
         } 
         else {
             this.handleOnClickOrig = this.handleOnClick;
             this.handleClick = null;
-            this.leftContainer.style.cursor = 'default';
-            this.centerContainer.style.cursor = 'default';
-            this.rightContainer.style.cursor = 'default';
-            this._setTableOpacity(this.DISABLED_TABLE_OPACITY);
+            this.domNode.className = 'btnElemBase' + suf + ' btnElemDisabled' + suf;
+            this._setOpacity(this.DISABLED_OPACITY);
         }
-        
-        this._setButtonImages();
-        
     },
-    getButtonHeight: function() {
-        return this.small ? 18 : 24;
+    _attachHandlers: function () {
+        dojo.event.connect(this.domNode, 'onmouseover', this, '_morphButton');
+        dojo.event.connect(this.domNode, 'onmouseout', this, '_morphButton');
+        dojo.event.connect(this.domNode, 'onmousedown', this, '_morphButton');
+        dojo.event.connect(this.domNode, 'onmouseup', this, '_morphButton');
+        dojo.event.connect(this.domNode, 'onclick', this, '_handleOnClick');
     },
-    getCapWidth: function() {
-        return this.small ? 9 : 10;
-    },
-    getStyleForSize: function () {
-        var s = 'buttonText';
-        if (!this.enabled) {
-            s += 'Disabled'
+    _morphButton: function(e) {
+        if (this.enabled) {
+            var s = e.type;
+            var suf = this.small ? 'Sm' : '';
+            var states = {
+                mouseover: 'btnElemBase' + suf + ' btnElemMouseover' + suf,
+                mouseout: 'btnElemBase' + suf,
+                mousedown: 'btnElemBase' + suf + ' btnElemMousedown' + suf,
+                mouseup: 'btnElemBase' + suf
+            }
+            this.domNode.className = states[s]; 
         }
-        if (this.small) {
-            s += 'Sm';
-        }
-        return s;
     },
-    _setButtonImages: function(lit) {
-        this.leftContainer.style.background="url('"+this._getLeftButtonImagePath(this.enabled, this.small, lit)+"')";
-        this.centerContainer.style.background="url('"+this._getCenterButtonImagePath(this.enabled, this.small, lit)+"')";
-        this.rightContainer.style.background="url('"+this._getRightButtonImagePath(this.enabled, this.small, lit)+"')";
-    },
-    _getCenterButtonImagePath: function(enabled, small, lit) {
-		return this._getButtonPath("center", enabled, small, lit);
-    },
-    _getLeftButtonImagePath : function(enabled, small, lit) {
-		return this._getButtonPath("left", enabled, small, lit);
-    },
-    _getRightButtonImagePath: function(enabled, small, lit) {
-		return this._getButtonPath("right", enabled, small, lit);
-    },
-    _getButtonPath: function(leftRightCenter, enabled, small, lit) {
-        var path = this.buttonDirectory + "button_" + leftRightCenter;
-        if (!enabled) { path += "_dim"; }
-        if (lit) { path += "_lit"; }
-        if (small) { path += "_sm"; }
-        path += ".gif";
-        return path;
-    },
-    _handleMouseOver: function() {
-         if (this.enabled) {
-             this._setButtonImages(true);
-         }
-    },
-    _handleMouseOut: function() {
-         if (this.enabled) {
-             this._setButtonImages();
-         }
-    },
     _handleOnClick: function() {
         if (this.enabled) {
            this.handleOnClick();
         }
     },
-    _setTableOpacity: function(tableOpacity) {
-	    this.tableContainer.style.opacity = tableOpacity;
-	    if (document.all) {
-	        this.tableContainer.style.filter = "alpha(opacity="+ tableOpacity * 100 +")";
-	    }
+    _setOpacity: function(opac) {
+        this.domNode.style.opacity = opac;
+        if (document.all) {
+            this.domNode.style.filter = "alpha(opacity="+ opac * 100 +")";
+        }
     }
-    
   } );
Index: cosmo/src/main/webapp/js/cosmo/ui/widget/ModalDialog.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/ui/widget/ModalDialog.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/ui/widget/ModalDialog.js	(working copy)
@@ -39,10 +39,12 @@
 dojo.widget.defineWidget("cosmo.ui.widget.ModalDialog", 
 dojo.widget.HtmlWidget, {
         // Template stuff
-        templatePath:dojo.uri.dojoUri(
-            '../../cosmo/ui/widget/templates/ModalDialog/ModalDialog.html'),
+        templateString: '<div id="modalDialog"></div>',
         
         // Attach points
+        dropShadowOuterNode: null,
+        dropShadowRightNode: null,
+        dropShadowBottomNode: null,
         containerNode: null,
         titleNode: null,
         promptNode: null,
@@ -55,6 +57,7 @@
         CONFIRM: 'confirm',
         width: null,
         height: null,
+        _containerHeight: null,
         title: '',
         prompt: '',
         content: null,
@@ -78,15 +81,46 @@
             this.domNode.style.left = s;
         },
         setWidth: function (n) {
-            var s = n.toString();
-            s = s.indexOf('%') > -1 ? s : parseInt(s) + 'px';
-            this.domNode.style.width = s;
+            if (n) { this.width = n; }
+            var s = this.width.toString();
+            s = this._rationalizeUnits(s);
+            this.dropShadowOuterNode.style.width = s;
+            var s = this.dropShadowOuterNode.offsetWidth;
+            this.containerNode.style.width = s + 'px';
+            s += 16;
+            this.dropShadowOuterNode.style.width = s + 'px';
+            this.dropShadowBottomNode.style.width = (s - 48) + 'px';
+            return true;
         },
         setHeight: function (n) {
-            var s = n.toString();
-            s = s.indexOf('%') > -1 ? s : parseInt(s) + 'px';
-            this.domNode.style.height = s; 
+            if (n) { this.height = n; }
+            var s = this.height.toString();
+            s = this._rationalizeUnits(s);
+            this.dropShadowOuterNode.style.height = s;
+            var s = this.dropShadowOuterNode.offsetHeight;
+            // Stash container height since Safari's DOM lookups
+            // don't seem to happen in any particular order
+            this._containerHeight = s; 
+            this.containerNode.style.height = s + 'px';
+            s += 16;
+            this.dropShadowOuterNode.style.height = s + 'px';
+            this.dropShadowRightNode.style.height = (s - 32) + 'px';
+            return true;
         },
+        _rationalizeUnits: function (s) {
+            if (s.indexOf('%') > -1) {
+                return s;
+            }
+            else if (s.indexOf('px') > -1) {
+                return s;
+            }
+            else if (s.indexOf('em') > -1) {
+                return s;
+            }
+            else {
+                return parseInt(s) + 'px';
+            }
+        },
         setContentAreaHeight: function () {
             var spacer = this.buttonPanelNode.offsetHeight;
             spacer += 32;
@@ -96,12 +130,14 @@
             if (this.prompt) {
                 spacer += this.promptNode.offsetHeight;
             }
-            this.contentNode.style.height = (this.domNode.offsetHeight - spacer) + 'px';
+            var o = this._containerHeight;
+            this.contentNode.style.height = (o - spacer) + 'px';
             
             // BANDAID: Hack to get Safari to render the height of the 
             // content area properly
             if (navigator.userAgent.indexOf('Safari') > -1) {
                 this.contentNode.style.border = '1px solid #ffffff';
+                this.contentNode.style.overflow = 'auto';
             }
         },
         setTitle: function (title) {
@@ -133,11 +169,6 @@
             }
             return true;
         },
-        _removeChildren: function(node){
-            while(node.firstChild) {
-                node.removeChild(node.firstChild);
-            }
-        },
         setContent: function (content) {
             this.content = content || this.content;
             // Content area
@@ -205,10 +236,10 @@
                 m.style.background = '#ffffff';
                 // In IE6 have to use special alpha filter thingie
                 if (document.all) {
-                    m.style.filter = 'alpha(opacity=60)';
+                    m.style.filter = 'alpha(opacity=80)';
                 }
                 else {
-                    m.style.opacity = 0.6;
+                    m.style.opacity = 0.8;
                 }
                 this.uiFullMask = m;
                 document.body.appendChild(this.uiFullMask);
@@ -216,6 +247,116 @@
             this.uiFullMask.style.display = 'block';
             return true;
         },
+        _removeChildren: function(node){
+            while(node.firstChild) {
+                node.removeChild(node.firstChild);
+            }
+        },
+        _setUpDialog: function () {
+            var table = _createElem('table');
+            var body = _createElem('tbody');
+            var row = null; // Temp for row
+            var td = null; // Temp for cells
+            table.cellPadding = '0';
+            table.cellSpacing = '0';
+            table.className = 'dropShadowTable';
+
+            row = _createElem('tr');
+            
+            cell = _createElem('td');
+            cell.colSpan = 4;
+            cell.className = 'dropShadowTop';
+            cell.innerHTML = '&nbsp;';
+            row.appendChild(cell);
+            
+            body.appendChild(row);
+            
+            row = _createElem('tr');
+            
+            cell = _createElem('td');
+            cell.rowSpan = 3;
+            cell.className = 'dropShadowLeft';
+            cell.innerHTML = '&nbsp;';
+            row.appendChild(cell);
+            
+            cell = _createElem('td');
+            cell.rowSpan = 2;
+            cell.colSpan = 2;
+            cell.id = 'dialogCenterContent';
+            cell.className = 'dropShadowCenter';
+            cell.innerHTML = '&nbsp;';
+            row.appendChild(cell);
+            
+            this.containerNode = cell;
+            
+            var d = _createElem('div');
+            d.id = "modalDialogTitle";
+            this.titleNode = d;
+            cell.appendChild(d);
+
+            var d = _createElem('div');
+            d.id = "modalDialogPrompt";
+            this.promptNode = d;
+            cell.appendChild(d);
+            
+            var d = _createElem('div');
+            d.id = "modalDialogImage";
+            this.imageNode = d;
+            cell.appendChild(d);
+            
+            var d = _createElem('div');
+            d.id = "modalDialogContent";
+            this.contentNode = d;
+            cell.appendChild(d);
+            
+            var d = _createElem('div');
+            d.id = "modalDialogButtonPanel";
+            d.className = 'dialogButtonPanel';
+            this.buttonPanelNode = d;
+            cell.appendChild(d);
+
+            cell = _createElem('td');
+            cell.className = 'dropShadowTopRightCorner';
+            cell.innerHTML = '&nbsp;';
+            row.appendChild(cell);
+            
+            body.appendChild(row);
+
+            row = _createElem('tr');
+            
+            cell = _createElem('td');
+            cell.className = 'dropShadowRight';
+            cell.innerHTML = '&nbsp;';
+            this.dropShadowRightNode = cell;
+            row.appendChild(cell);
+            
+            body.appendChild(row);
+
+            row = _createElem('tr');
+            
+            cell = _createElem('td');
+            cell.className = 'dropShadowBottomLeft';
+            cell.innerHTML = '&nbsp;';
+            row.appendChild(cell);
+            
+            cell = _createElem('td');
+            cell.className = 'dropShadowBottom';
+            //cell.style.width = (w - 48) + 'px';
+            cell.innerHTML = '&nbsp;';
+            this.dropShadowBottomNode = cell;
+            row.appendChild(cell);
+            
+            cell = _createElem('td');
+            cell.className = 'dropShadowBottomRightCorner';
+            cell.innerHTML = '&nbsp;';
+            row.appendChild(cell);
+            
+            body.appendChild(row);
+            table.appendChild(body);
+            this.dropShadowOuterNode = table;
+            
+            this.domNode.appendChild(table);
+        },
         
         // Lifecycle functions
         postMixInProperties: function () {
@@ -254,21 +395,22 @@
                     this.title = title || this.title;
                     this.prompt = prompt || this.prompt;
                 }
-
                 // Sizing
                 this.width = this.width || DIALOG_BOX_WIDTH;
-                this.height = this.height || DIALOG_BOX_HEIGHT;
-                this.setWidth(this.width);
-                this.setHeight(this.height);
+                this.height = this.height || DIALOG_BOX_HEIGHT;                
                 
+                this._setUpDialog();
+                
                 var waitForIt = this.render() && this.center();
                 this.renderUiMask();
                 this.domNode.style.display = 'block';
                 this.domNode.style.zIndex = 2000;
 
                 // Have to measure for content area height once div is actually on the page
+                if (this.setWidth() &&
+                this.setHeight()) {
                 this.setContentAreaHeight();
-                
+                }
                 if (this.content instanceof dojo.widget.HtmlWidget 
                     && this.content.appendedToParent){
                     this.content.appendedToParent(this);
@@ -307,6 +449,8 @@
                     this.content.destroy();
                 }
                 this.content = null;
+                // Cleanup -- wipe DOM inside container
+                this.domNode.innerHTML = '';
                 
             };
         },
Index: cosmo/src/main/webapp/js/cosmo/ui/widget/CollectionDetailsDialog.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/ui/widget/CollectionDetailsDialog.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/ui/widget/CollectionDetailsDialog.js	(working copy)
@@ -77,13 +77,12 @@
             atom:_("Main.CollectionDetails.atom"),
             protocolInstructions:_("Main.CollectionDetails.protocolInstructions"),
             helpLink:_("Main.CollectionDetails.HelpUrl"),
-            chandlerLink:_("Main.CollectionDetails.ChandlerUrl"),
-            chandlerDownloadLink:_("Main.CollectionDetails.ChandlerDownloadUrl"),
             help:_("Main.CollectionDetails.Help"),
-            downloadHere:_("Main.CollectionDetails.DownloadHere"),
-            dontHave:_("Main.CollectionDetails.DontHave"),
             clickHere:_("Main.CollectionDetails.ClickHere"),
-            helpLink:_("Main.CollectionDetails.HelpLink")
+            helpLink:_("Main.CollectionDetails.HelpLink"),
+            chandlerPlug: _('Main.CollectionDetails.ChandlerPlug', 
+                '<span style="font-variant:small-caps;"><a href="http://chandler.osafoundation.org/">', 
+                '</a></span>')
         },
         
         clientsToProtocols: {
@@ -119,6 +118,11 @@
            }
            this.clientSelector.selectedIndex = selectedIndex;
            
+           // Chandler plug contains a URL path with quotes. The Dojo widget
+           // template variable substitution 'helpfully' escapes these into
+           // two quotes each
+           this.chandlerPlug.innerHTML = '| ' + this.strings.chandlerPlug;
+
            this._handleClientChanged();
         },
         
Index: cosmo/src/main/webapp/js/cosmo/ui/widget/templates/CollectionDetailsDialog/CollectionDetailsDialog.html
===================================================================
--- cosmo/src/main/webapp/js/cosmo/ui/widget/templates/CollectionDetailsDialog/CollectionDetailsDialog.html	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/ui/widget/templates/CollectionDetailsDialog/CollectionDetailsDialog.html	(working copy)
@@ -111,12 +111,11 @@
     </table>
     <div dojoAttachPoint="helpText" style="visibility: hidden; position:absolute; top:0px; left:0px">
          <a href="${this.strings.helpLink}">${this.strings.help}</a>
-    <span dojoAttachPoint="chandlerPlug" style="display:none">| ${this.strings.dontHave}
-        <a href="${this.strings.chandlerLink}">Chandler</a>? 
-        <a href="${this.strings.chandlerDownloadLink}"> 
-            <span style="font-size: 9px">${this.strings.downloadHere}</span>
-        </a>
-    </span>
+        <span dojoAttachPoint="chandlerPlug" style="display:none"><!-- 
+            Don't use Dojo widget string substitution with anchor tags -
+            it 'helpfully' escapes the quotes in the href prop
+            Have to insert as innerHTML during fillInTemplate
+            --></span>
     </div>
 </div>
 
Index: cosmo/src/main/webapp/js/cosmo/ui/widget/CollectionSelector.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/ui/widget/CollectionSelector.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/ui/widget/CollectionSelector.js	(working copy)
@@ -106,34 +106,26 @@
                         // Action to take after successful auth -- try to add the
                         // collection subscription
                         attemptFunc: function () {
-                            // Special Doug Henning section -- some closure to get the
-                            // callback from the async response to exec in the AuthBox
-                            // scope. Here I'm going back into the AuthBox to call
-                            // the response handler, which just executes successFunc below
-                            // I could just set up an anon function here to handle the
-                            // response, but I think it's clearer having a success handler 
-                            // specifically defined
-                            var self = this; // Reference to the AuthBox
-                            var n = function (a, b, c) {
-                                self.handleAuthActionResp.apply(self, [a, b, c]) 
+                            var self = this; // 'self' is CollectionSelector
+                            // Handler function for attempt to add collection
+                            // If it's added successfully, log the user in to look at it
+                            var n = function (nothingParam, err, requestId) {
+                                var msg = self.authAction.successPrompt;
+                                if (err) {
+                                    cosmo.app.hideDialog();
+                                    cosmo.app.showErr(self.strings.collectionAddError, err);
+                                    return false;
+                                }
+                                else {
+                                    // Log the user into Cosmo and display the current collection
+                                    self._showPrompt(msg);
+                                    location = cosmo.env.getBaseUrl() + '/pim/collection/' + curr.collection.uid;
+                                }
                             };
                             Cal.serv.saveSubscription(n, curr.collection.uid, passedKey, 
                                 curr.displayName)
                         },
                         attemptPrompt: strings.attemptPrompt, 
-                        successFunc: function (whatIsThisParam, err, requestId) {
-                            var msg = this.authAction.successPrompt; // 'this' is the AuthBox
-                            if (err) {
-                                cosmo.app.hideDialog();
-                                cosmo.app.showErr(strings.collectionAddError, err);
-                                return false;
-                            }
-                            else {
-                                // Log the user into Cosmo and display the current collection
-                                this._showPrompt(msg);
-                                location = cosmo.env.getBaseUrl() + '/pim/collection/' + curr.collection.uid;
-                            }
-                        },
                         successPrompt: strings.successPrompt };
                     f = function () {
                         var authBoxProps = cosmo.ui.widget.AuthBox.getInitProperties(authAction);
Index: cosmo/src/main/webapp/js/cosmo/ui/button.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/ui/button.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/ui/button.js	(working copy)
@@ -21,28 +21,9 @@
  */
 dojo.provide("cosmo.ui.button");
 dojo.require("cosmo.ui.conf");
+dojo.require("dojo.event");
 dojo.require("dojo.widget.*");
 
-function buttonPreload() {
-    var btnSizes = ['', '_sm'];
-    var btnSides = ['left', 'center', 'right'];
-    var btnTypes = ['', '_dim', '_lit'];
-    var btnPreload = {};
-    var f = function(base, suffix, size) {
-        var p = 'button_' + base + suffix + size;
-        btnPreload[p] = new Image();
-        btnPreload[p].src = BUTTON_DIR_PATH + p + '.gif';
-    }
-    for (var h in btnSizes) {
-        for (var i in btnSides) {
-            for (var j in btnTypes) {
-                f(btnSides[i], btnTypes[j], btnSizes[h]);
-            }
-        }
-    }
-}
-buttonPreload();
-
 /**
  * @object Button -- creates a button with a text label, and images
  * for endcaps and a stretchable, tiling middle section. Comes in
@@ -96,46 +77,25 @@
         var nbDivider = null;
 
         nbTable.style.width = '45px';
-        nbTable.style.height = '18px';
+        nbTable.style.height = '16px';
         nbTable.cellPadding = '0px'; // Note camelCaps here, fun!! :)
         nbTable.cellSpacing = '0px'; // More camelCaps, yay!
         nbTable.appendChild(nbTBody);
         nbTBody.appendChild(nbRow);
-        // Left endcap
-        nbRow.appendChild(doButtonSetCap('Left', leftHandler));
         // Left arrow
         nbRow.appendChild(doButtonSetCenter('Left', leftHandler));
         // Divider cell
         nbDivider = document.createElement('td');
         nbDivider.id = id + 'ButtonDivider';
         nbDivider.style.width = '1px';
-        nbDivider.style.height = '18px';
+        nbDivider.style.height = '16px';
         nbDivider.style.lineHeight = '1px';
-        nbDivider.style.background = '#aaaaaa';
+        nbDivider.className = 'btnSetDividerBase';
         nbRow.appendChild(nbDivider);
         // Right arrow
         nbRow.appendChild(doButtonSetCenter('Right', rightHandler));
-        // Right endcap
-        nbRow.appendChild(doButtonSetCap('Right', rightHandler));
         return nbTable;
     }
-    // Private method to make the endcaps
-    var doButtonSetCap = function(side, clickHandler) {
-        var nbData = document.createElement('td');
-        var lowerCaseSide = side.toLowerCase();
-
-        nbData.id = id + side;
-        nbData.style.width = '9px';
-        nbData.style.height = '18px';
-        nbData.style.lineHeight = '18px';
-        nbData.style.cursor = 'pointer';
-        nbData.style.background = 'url(' + BUTTON_DIR_PATH +
-            'button_' + lowerCaseSide + '_sm.gif)';
-        nbData.onmouseover = function() { self.rolloverHandler(side, 'lit'); }
-        nbData.onmouseout = function() { self.rolloverHandler(side, ''); }
-        nbData.onclick = clickHandler;
-        return nbData;
-    }
     // Private method to make the center arrow cells
     var doButtonSetCenter = function(side, clickHandler) {
         var nbData = document.createElement('td');
@@ -144,19 +104,27 @@
 
         nbData.id = id + 'Center' + side;
         nbData.style.width = '13px';
-        nbData.style.height = '18px';
-        nbData.style.lineHeight = '18px';
+        nbData.style.height = '16px';
+        nbData.style.lineHeight = '16px';
         nbData.style.textAlign = lowerCaseSide;
-        nbData.style.background = 'url(' + BUTTON_DIR_PATH +
-            'button_center_sm.gif)';
-        nbData.style.backgroundRepeat = 'repeat-x';
-        nbData.style.cursor = 'pointer';
+        nbData.className = 'btnElemBaseSm';
         nbImg.src = BUTTON_DIR_PATH + 'nav_arrow_' +
             lowerCaseSide + '.gif';
+        if (side == 'Left') {
+            nbData.style.borderWidth = '1px 0 1px 1px';
+        }
+        else {
+            nbData.style.borderWidth = '1px 1px 1px 0';
+        }
+        nbImg.style.verticalAlign = 'middle';
+        nbImg.style.padding = '0 6px 0 6px';
         nbData.appendChild(nbImg);
-        nbData.onmouseover = function() { self.rolloverHandler(side, 'lit'); }
-        nbData.onmouseout = function() { self.rolloverHandler(side, ''); }
-        nbData.onclick = clickHandler;
+        
+        dojo.event.connect(nbData, 'onmouseover', self, '_morphButton');
+        dojo.event.connect(nbData, 'onmouseout', self, '_morphButton');
+        dojo.event.connect(nbData, 'onmousedown', self, '_morphButton');
+        dojo.event.connect(nbData, 'onmouseup', self, '_morphButton');
+        dojo.event.connect(nbData, 'onclick', clickHandler);
         return nbData;
     }
 
@@ -164,19 +132,31 @@
     // ========
     this.id = id;
     this.domNode = doButtonTable();
-    this.rolloverHandler = function(side, state) {
-        // Do the rollover for the entire button set together
-        // Doing just one side at a time looks freaky
-        this.doRollover(side, state);
+    this._morphButton = function(e) {
+        var s = e.type;
+        var t = e.currentTarget;
+        var center = $(this.id + 'ButtonDivider');
+        if (!t.id) { return false; }
+        var states = {
+            mouseover: 'btnElemBaseSm' + ' btnElemMouseoverSm',
+            mouseout: 'btnElemBaseSm',
+            mousedown: 'btnElemBaseSm' + ' btnElemMousedownSm',
+            mouseup: 'btnElemBaseSm'
+        }
+        // On mousedown the separator div may be serving as the
+        // right-border of the left button, or vice-versa
+        if (s == 'mousedown') {
+            if (t.id.indexOf('Left') > -1) {
+                center.className = 'btnSetDividerLeftPress';
+            }
+            else {
+                center.className = 'btnSetDividerRightPress';
+            }
+        }
+        else {
+            center.className = 'btnSetDividerBase';
+        }
+        t.className = states[s]; 
+    
     };
-    this.doRollover = function(side, state) {
-        var btnSide = side.toLowerCase();
-        var btnState = state ? '_' + state : '';
-        var dividerColor = state == 'lit' ? '#000000' : '#aaaaaa';
-        document.getElementById(this.id + 'Center' + side).style.background =
-            'url(' + BUTTON_DIR_PATH + 'button_center' + btnState + '_sm.gif)';
-        document.getElementById(this.id + side).style.background =
-            'url(' + BUTTON_DIR_PATH + 'button_' + btnSide + btnState + '_sm.gif)';
-        document.getElementById(this.id + 'ButtonDivider').style.background = dividerColor;
-    };
 }
Index: cosmo/src/main/webapp/templates/default/ui.css
===================================================================
--- cosmo/src/main/webapp/templates/default/ui.css	(revision 3653)
+++ cosmo/src/main/webapp/templates/default/ui.css	(working copy)
@@ -256,38 +256,78 @@
 
 /* Buttons
  * --------------------- */
-/* Normal-sized buttons */
-$buttonHeight = 24px
-.buttonText {
-    font-size:$fontSizeM;
-    color:$linkTextColor;
-    height:$buttonHeight;
-    line-height:$buttonHeight;
-    vertical-align:middle;
+.btnElemBase {
+    width: 76px;
+    margin: auto;
+    text-align: center;
+    font-size: 11px;
+    color: #333399;
+    border-style: solid;
+    border-color: #ccc #777 #777 #ccc;
+    border-width: 1px;
+    height: 24px;
+    padding: 0 0 2px 0;
+    cursor: pointer;
+    background-image: url(templates/default/images/button_bgs.gif);
+    background-repeat: repeat-x;
+    background-position: 0px 0px;
 }
-.buttonTextDisabled {
-    font-size:$fontSizeM;
-    color:$linkTextDisabledColor;
-    height:$buttonHeight;
-    line-height:$buttonHeight;
-    vertical-align:middle;
+.btnElemMouseover {
+    color: #3333aa;
+    background-position: 0px -24px;
 }
-/* Small-sized buttons */
-$smButtonHeight = 18px
-.buttonTextSm {
-    font-size:$fontSizeS;
-    color:$linkTextColor;
-    height:$smButtonHeight;
-    line-height:$smButtonHeight;
-    vertical-align:middle;
+.btnElemMousedown {
+    color: #3333aa;
+    border-color: #555 #bbb #bbb #555;
+    background-position: 0px -24px;
 }
-.buttonTextDisabledSm {
-    font-size:$fontSizeS;
-    color:$linkTextDisabledColor;
-    height:$smButtonHeight;
-    line-height:$smButtonHeight;
-    vertical-align:middle;
+.btnElemDisabled {
+    color: #999;
+    border-color: #ddd #888 #888 #ddd;
+    cursor: default;
 }
+.btnElemBaseSm {
+    width: 60px;
+    margin: auto;
+    text-align: center;
+    font-size: 9px;
+    color: #333399;
+    border-style: solid;
+    border-color: #ccc #777 #777 #ccc;
+    border-width: 1px;
+    height: 18px;
+    padding: 0 0 1px 0;
+    cursor: pointer;
+    background-image: url(templates/default/images/button_bgs_sm.gif);
+    background-repeat: repeat-x;
+    background-position: 0px 0px;
+}
+.btnElemMouseoverSm {
+    color: #3333aa;
+    background-position: 0px -18px;
+}
+.btnElemMousedownSm {
+    color: #3333aa;
+    border-color: #555 #bbb #bbb #555;
+    background-position: 0px -18px;
+}
+.btnElemDisabledSm {
+    color: #999;
+    border-color: #ddd #888 #888 #ddd;
+    cursor: default;
+}
+.btnSetDividerBase {
+    border: 0px;
+    background-color: #aaa;
+}
+.btnSetDividerLeftPress {
+    border: 0px;
+    background-color: #bbb;
+}
+.btnSetDividerRightPress {
+    border: 0px;
+    background-color: #555;
+}
 
 /* General widget/UI
  * --------------------- */
@@ -709,17 +749,18 @@
  * --------------------- */
 /* Main box for fake popup */
 #modalDialog {
-    background:$mainUIColor;
     position:absolute;
+    /* background:$mainUIColor;
     background:$mainUIColor;
-    border:1px solid $uiDetailBorderColor;
+    border:1px solid $uiDetailBorderColor; */
     z-index:2000;
     display:none;
 }
 /* Fake popup center content area -- inside padding */
-#modalDialogContainer {
-    padding:18px;
-    padding-bottom:0px;
+#modalDialogContent {
+    padding: 18px;
+    padding-bottom: 0px;
+    line-height: 12px;
 }
 /* Only set if the dialog title exists */
 .dialogTitle {
@@ -728,7 +769,7 @@
     height:24px;
     line-height:26px;
     vertical-align:middle;
-    border:1px solid #dfdfdf;
+    border-bottom:1px solid #dfdfdf;
     padding-left:6px;
     font-size:13px;
     font-weight:bold;
@@ -737,13 +778,97 @@
 /* Only set if the dialog prompt exists */
 .dialogPrompt {
     text-align:left;
-    padding-top:4px;
+    padding: 4px 0 0 8px;
     height:32px;
     line-height:16px;
     vertical-align:middle;
     font-size:11px;
 }
+.dialogButtonPanel {
+    padding: 0 8px;
+}
+.dropShadowTable {
+  /* 
+  Requires a specific width & height set -- some of the cells in
+  this type of table also require a specific height or width
+  set relative to the overall size of this table for cell
+  sizing and bg image tiling to work.  These will be noted in
+  the specific class
+  This is *not* a simple nine-cell table -- set border = 1
+  on the table to see the composition
+  */
+  position: absolute;
+}
+.dropShadowTop {
+  /* 
+  Empty top row -- makes sure there's an even 16px all the
+  way around the box the drop shadow is on
+  */
+  height: 16px; 
+  font-size: 1px;
+}
+.dropShadowLeft {
+  /*
+  Empty left column -- same as above
+  */
+  width: 16px;
+}
+.dropShadowTopRightCorner {
+  width: 16px; 
+  height: 16px;
+  font-size: 1px;
+  background-image: url(templates/default/images/drop_shadow_side_imgs.png); 
+  background-position: 0px 0px;
+}
+.dropShadowCenter {
+  /*
+  Inner box with borders -- darker color for border on 
+  right and bottom where drop shadow appears. Any content
+  should sit inside this box
+  */
+  background-color: #fff;
+  border-style: solid;
+  border-width: 1px;
+  border-color: #ccc #888 #888 #ccc;
+  vertical-align: top;
+  line-height: 0px;
+}
+.dropShadowRight {
+  /*
+  This cell needs a height specified of total
+  dropShadowTable's height minus 32px
+  */
+  opacity: 0.8; 
+  background-image: url(templates/default/images/drop_shadow_side_imgs.png); 
+  background-repeat: repeat-y; background-position:-16px 0px; 
+  font-size: 1px; 
+}
+.dropShadowBottomLeft {
+  width: 16px; 
+  height: 16px; 
+  background-image: url(templates/default/images/drop_shadow_bottom_imgs.png); 
+  background-position: 0px 0px; 
+  font-size: 1px;
+}
+.dropShadowBottom {
+  /*
+  Requires a specific width set of total dropShadowTable's
+  width minus 48px
+  */
+  opacity: 0.8; 
+  background-image: url(templates/default/images/drop_shadow_bottom_imgs.png); 
+  background-repeat: repeat-x; 
+  background-position: 0px -16px; 
+  font-size: 1px;
+}
+.dropShadowBottomRightCorner {
+  width: 16px; 
+  background-image: url(templates/default/images/drop_shadow_side_imgs.png); 
+  background-position: -32px 0px; 
+  font-size:1px;
+}
 
+
 /* Tab container 
  * --------------------- */
 .tabPanel {
Index: cosmo/src/main/webapp/templates/default/images/button_center_lit.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_left.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_left_lit_sm.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_right_dim.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_center.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_left_dim_sm.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_left_dim.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_right_lit_sm.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_right_lit.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_center_lit_sm.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_left_sm.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_left_lit.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_right_dim_sm.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_center_dim_sm.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_center_dim.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_right_sm.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_right.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_center_sm.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/drop_shadow_side_imgs.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/drop_shadow_bottom_imgs.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_bgs_sm.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/src/main/webapp/templates/default/images/button_bgs.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: cosmo/pom.xml
===================================================================
--- cosmo/pom.xml	(revision 3653)
+++ cosmo/pom.xml	(working copy)
@@ -474,7 +474,7 @@
                                  <artifactItem>
                                     <groupId>org.osaf.cosmo</groupId>
                                     <artifactId>dojo</artifactId>
-                                    <version>0.4.1</version>
+                                    <version>0.4.1-1</version>
                                     <type>jar</type>
                                   </artifactItem>
                                   <artifactItem>
@@ -520,7 +520,7 @@
                                  <artifactItem>
                                     <groupId>org.osaf.cosmo</groupId>
                                     <artifactId>dojo</artifactId>
-                                    <version>0.4.1</version>
+                                    <version>0.4.1-1</version>
                                     <type>jar</type>
                                   </artifactItem>
                                   <artifactItem>
Index: snarf/src/main/config/log4j.xml
===================================================================
--- snarf/src/main/config/log4j.xml	(revision 3653)
+++ snarf/src/main/config/log4j.xml	(working copy)
@@ -40,6 +40,10 @@
   <logger name="org.osaf">
     <level value="DEBUG"/>
   </logger>
+  
+  <logger name="org.osaf.cosmo.ui">
+    <level value="INFO"/>
+  </logger>
 
   <logger name="org.osaf.cosmo.acegisecurity.context.HttpRequestContextIntegrationFilter">
     <level value="WARN"/>
Index: snarf/src/bin/osafsrvctl.bat
===================================================================
--- snarf/src/bin/osafsrvctl.bat	(revision 3653)
+++ snarf/src/bin/osafsrvctl.bat	(working copy)
@@ -22,6 +22,8 @@
 goto end
 :okHome
 
+if not exist "%OSAFSRV_HOME%\logs" md "%OSAFSRV_HOME%\logs"
+
 rem tomcat is found one level above this directory
 set CATALINA_HOME=%OSAFSRV_HOME%\tomcat
 set CATALINA_BIN=%CATALINA_HOME%\bin
@@ -29,6 +31,8 @@
 
 set EXECUTABLE=%CATALINA_BIN%\%TOMCAT_SCRIPT%
 
+if not exist "%CATALINA_HOME%\temp" md "%CATALINA_HOME%\temp"
+
 rem Check that target executable exists
 if exist "%EXECUTABLE%" goto okExec
 echo Cannot find %EXECUTABLE%
Index: pom.xml
===================================================================
--- pom.xml	(revision 3653)
+++ pom.xml	(working copy)
@@ -24,8 +24,8 @@
     <url>http://cosmo.osafoundation.org</url>
     <modules>
         <module>cosmo</module>
+        <module>migration</module>
         <module>snarf</module>
-        <module>migration</module>
     </modules>
     <repositories>
         <repository>
@@ -89,12 +89,12 @@
             </dependency>
             <dependency>
                 <groupId>org.osaf.cosmo</groupId>
-                <artifactId>snarf</artifactId>
+                <artifactId>migration</artifactId>
                 <version>${project.version}</version>
             </dependency>
             <dependency>
                 <groupId>org.osaf.cosmo</groupId>
-                <artifactId>migration</artifactId>
+                <artifactId>snarf</artifactId>
                 <version>${project.version}</version>
             </dependency>
         </dependencies>
Index: dojo/build.sh
===================================================================
--- dojo/build.sh	(revision 3653)
+++ dojo/build.sh	(working copy)
@@ -10,4 +10,6 @@
     ant -Ddocless=true -Dprofile=../../../cosmo clean release
 else
     ant -Ddocless=true -Dprofile=core clean release
-fi
\ No newline at end of file
+fi
+gzip -c ../release/dojo/dojo.js > ../release/dojo/dojo.js.gzip-compressed
+
Index: dojo/pom.xml
===================================================================
--- dojo/pom.xml	(revision 3653)
+++ dojo/pom.xml	(working copy)
@@ -22,7 +22,7 @@
     </parent>
     <modelVersion>4.0.0</modelVersion>
     <artifactId>dojo</artifactId>
-    <version>0.4.1</version>
+    <version>0.4.1-1</version>
     <packaging>jar</packaging>
     <name>Dojo Build</name>
     <dependencies>
@@ -35,6 +35,7 @@
                 <filtering>false</filtering>
                 <includes>
                     <include>dojo.js</include>
+                    <include>dojo.js.gzip-compressed</include>
                     <include>LICENSE</include>
                     <include>README</include>
                 </includes>
