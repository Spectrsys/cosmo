#!/usr/bin/perl -w
# -*- Mode: Perl; indent-tabs-mode: nil; -*-
# 
# Copyright 2007 Open Source Applications Foundation
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;

use Cosmo::MC ();
use File::Basename ();
use Getopt::Long ();

BEGIN { $0 = File::Basename::basename($0) }

use constant VERSION => '0.01';
use constant PROGRAM => $0;
use constant USAGE => <<EOT;
Usage: $0 [OPTIONS...] -u [username] -p [password]

An interactive command shell for interacting with Cosmo over Morse Code.

Options:
  -s [url]         server root URL (defaults to http://localhost:8080)
  -u [username]    username of user making the request
  -p [password]    password of user making the request
  -d               print debugging information to STDOUT
  -h               list available command line options (this page)
  -v               print version information and exit

Report bugs to cosmo-dev\@osafoundation.org
EOT

use constant DEFAULT_SERVER_URL => 'http://localhost:8080/cosmo';

my ($ServerUrl, $Username, $Password, $Debug, $opt_help, $opt_version);

# process command line options
Getopt::Long::GetOptions(
    "s=s" => \$ServerUrl,
    "u=s" => \$Username,
    "p=s" => \$Password,
    "d"   => \$Debug,
    "h"   => \$opt_help,
    "v"   => \$opt_version,
    );
(print USAGE and exit) if $opt_help;
(print sprintf("%s/%s\n", PROGRAM, VERSION) and exit) if $opt_version;

(print USAGE and exit) unless $Username && $Password;

$ServerUrl ||= DEFAULT_SERVER_URL;
chop($ServerUrl) if $ServerUrl =~ m|/$|;

Cosmo::MC::Shell->new($ServerUrl, $Username, $Password, $Debug)->cmdloop();

exit;

package Cosmo::MC::Shell;

use Term::Shell ();

use base qw(Term::Shell);

sub init {
    my $self = shift;

    my $serverUrl = $self->{API}{args}[0];
    my $username = $self->{API}{args}[1];
    my $password = $self->{API}{args}[2];
    my $debug = $self->{API}{args}[3];

    print "Morse Code command shell v", main::VERSION, "\n";
    print "Debugging enabled.\n" if $debug;

    $self->{mc} = Cosmo::MC->new($serverUrl, $username, $password, $debug);
    $self->{debug} = $debug;

    $self->{mc}->agent(main::PROGRAM . "/" . main::VERSION);

    eval {
        $self->{mc}->check_server_availability();
        print "Connected to $serverUrl.\n";
    };
    if ($@) {
        print "Error: $@" if $self->{debug};
        print "Failed to connect to $serverUrl. Exiting.\n";
        exit 1;
    }
}

sub prompt_str { "mc> " }
sub alias_exit { ("quit") }

sub run_subscribe {
    my $self = shift;
    my $uid = shift or do {
        print "Uid required.\n";
        return;
    };

    warn "Subscribing to collection $uid\n" if $self->{debug};
    eval {
        $self->{mc}->subscribe($uid);
    };
    if ($@) {
        print "Failed: $@\n";
        return;
    }

    # XXX do something with the response content
}

sub help_subscribe { return "Subscribe to a collection by providing its uid" }
sub smry_subscribe { return "Subscribe to collection <uid>" }

1;
