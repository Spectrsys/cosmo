Index: cosmo/src/test/unit/java/org/osaf/cosmo/service/impl/StandardUserServiceTest.java
===================================================================
--- cosmo/src/test/unit/java/org/osaf/cosmo/service/impl/StandardUserServiceTest.java	(revision 3653)
+++ cosmo/src/test/unit/java/org/osaf/cosmo/service/impl/StandardUserServiceTest.java	(working copy)
@@ -28,6 +28,7 @@
 import org.osaf.cosmo.dao.mock.MockContentDao;
 import org.osaf.cosmo.dao.mock.MockDaoStorage;
 import org.osaf.cosmo.dao.mock.MockUserDao;
+import org.osaf.cosmo.model.PasswordRecovery;
 import org.osaf.cosmo.model.User;
 import org.osaf.cosmo.service.account.AutomaticAccountActivator;
 
@@ -224,4 +225,60 @@
         // tests hex
         assertTrue("Digest not hex encoded", digested.matches("^[0-9a-f]+$"));
     }
+    
+    public void testCreatePasswordRecovery(){
+        User user = testHelper.makeDummyUser();
+        user = userDao.createUser(user);
+        
+        PasswordRecovery passwordRecovery = 
+            new PasswordRecovery(user, "pwrecovery1");
+        
+        passwordRecovery = service.createPasswordRecovery(passwordRecovery);
+
+        PasswordRecovery storedPasswordRecovery = 
+            service.getPasswordRecovery(passwordRecovery.getKey());
+
+        assertEquals(passwordRecovery, storedPasswordRecovery);
+        
+        service.deletePasswordRecovery(storedPasswordRecovery);
+        
+        storedPasswordRecovery = 
+            service.getPasswordRecovery(storedPasswordRecovery.getKey());
+        
+        assertNull(storedPasswordRecovery);
+    }
+    
+    public void testRecoverPassword(){
+        User user = testHelper.makeDummyUser();
+        
+        userDao.createUser(user);
+
+        PasswordRecovery passwordRecovery = new PasswordRecovery(user, "pwrecovery2");
+        
+        passwordRecovery = service.createPasswordRecovery(passwordRecovery);
+        
+        assertEquals(user, passwordRecovery.getUser());
+        
+        // Recover password
+        
+        PasswordRecovery storedPasswordRecovery = 
+            service.getPasswordRecovery(passwordRecovery.getKey());
+        
+        User changingUser = storedPasswordRecovery.getUser();
+        
+        String newPassword = service.generatePassword();
+
+        changingUser.setPassword(newPassword);
+        
+        changingUser = service.updateUser(changingUser);
+        
+        String changedPassword = changingUser.getPassword();
+        
+        User changedUser = service.getUser(changingUser.getUsername());
+        
+        assertEquals(changedUser, changingUser);
+        
+        assertEquals(changedPassword, changedUser.getPassword());
+       
+    }
 }
Index: cosmo/src/test/unit/java/org/osaf/cosmo/dao/hibernate/HibernateUserDaoTest.java
===================================================================
--- cosmo/src/test/unit/java/org/osaf/cosmo/dao/hibernate/HibernateUserDaoTest.java	(revision 3653)
+++ cosmo/src/test/unit/java/org/osaf/cosmo/dao/hibernate/HibernateUserDaoTest.java	(working copy)
@@ -25,6 +25,7 @@
 import org.hibernate.validator.InvalidStateException;
 import org.osaf.cosmo.model.DuplicateEmailException;
 import org.osaf.cosmo.model.DuplicateUsernameException;
+import org.osaf.cosmo.model.PasswordRecovery;
 import org.osaf.cosmo.model.User;
 import org.osaf.cosmo.util.PageCriteria;
 import org.osaf.cosmo.util.PagedList;
@@ -370,6 +371,39 @@
         Assert.assertNull(queryUser1);
     }
     
+    public void testCreatePasswordRecovery() throws Exception {
+        User user1 = new User();
+        user1.setUsername("user1");
+        user1.setFirstName("User");
+        user1.setLastName("1");
+        user1.setEmail("user1@user1.com");
+        user1.setPassword("user1password");
+        user1.setAdmin(Boolean.TRUE);
+
+        user1 = userDao.createUser(user1);
+        
+        PasswordRecovery passwordRecovery = new PasswordRecovery(user1, "1");
+        
+        userDao.createPasswordRecovery(passwordRecovery);
+        
+        String passwordRecoveryKey = passwordRecovery.getKey();
+        
+        clearSession();
+        
+        PasswordRecovery queryPasswordRecovery = 
+            userDao.getPasswordRecovery(passwordRecoveryKey);
+        
+        Assert.assertNotNull(queryPasswordRecovery);
+        Assert.assertEquals(passwordRecovery, queryPasswordRecovery);
+        
+        // Test delete
+        userDao.deletePasswordRecovery(queryPasswordRecovery);
+        queryPasswordRecovery = 
+            userDao.getPasswordRecovery(passwordRecoveryKey);
+        
+        Assert.assertNull(queryPasswordRecovery);
+    }
+    
     private void verifyUser(User user1, User user2) {
         Assert.assertEquals(user1.getUid(), user2.getUid());
         Assert.assertEquals(user1.getUsername(), user2.getUsername());
@@ -392,4 +426,5 @@
         Assert.fail("specified User doesn't exist in Set: "
                 + user.getUsername());
     }
+
 }
Index: cosmo/src/test/unit/java/org/osaf/cosmo/dao/mock/MockUserDao.java
===================================================================
--- cosmo/src/test/unit/java/org/osaf/cosmo/dao/mock/MockUserDao.java	(revision 3653)
+++ cosmo/src/test/unit/java/org/osaf/cosmo/dao/mock/MockUserDao.java	(working copy)
@@ -30,6 +30,7 @@
 import org.osaf.cosmo.dao.UserDao;
 import org.osaf.cosmo.model.DuplicateEmailException;
 import org.osaf.cosmo.model.DuplicateUsernameException;
+import org.osaf.cosmo.model.PasswordRecovery;
 import org.osaf.cosmo.model.User;
 import org.osaf.cosmo.util.PageCriteria;
 import org.osaf.cosmo.util.PagedList;
@@ -47,6 +48,7 @@
     private HashMap emailIdx;
     private HashMap uidIdx;
     private HashMap activationIdIdx;
+    private HashMap<String, PasswordRecovery> passwordRecoveryIdx;
 
     private VersionFourGenerator idGenerator = new VersionFourGenerator();
 
@@ -57,6 +59,7 @@
         emailIdx = new HashMap();
         uidIdx = new HashMap();
         activationIdIdx = new HashMap();
+        passwordRecoveryIdx = new HashMap<String, PasswordRecovery>();
 
         // add overlord user
         User overlord = new User();
@@ -222,4 +225,19 @@
      */
     public void destroy() {
     }
+
+    public void createPasswordRecovery(PasswordRecovery passwordRecovery) {
+        passwordRecoveryIdx.put(passwordRecovery.getKey(), passwordRecovery);
+        
+    }
+
+    public void deletePasswordRecovery(PasswordRecovery passwordRecovery) {
+        passwordRecoveryIdx.remove(passwordRecovery.getKey());
+        
+    }
+
+    public PasswordRecovery getPasswordRecovery(String key) {
+        return passwordRecoveryIdx.get(key);
+    }
+
 }
Index: cosmo/src/test/unit/resources/applicationContext-test.xml
===================================================================
--- cosmo/src/test/unit/resources/applicationContext-test.xml	(revision 3653)
+++ cosmo/src/test/unit/resources/applicationContext-test.xml	(working copy)
@@ -90,6 +90,7 @@
             <value>org.osaf.cosmo.model.Ticket</value>
             <value>org.osaf.cosmo.model.TimestampAttribute</value>
             <value>org.osaf.cosmo.model.User</value>
+            <value>org.osaf.cosmo.model.PasswordRecovery</value>
         </list>
     </property>
     <property name="entityInterceptor">
Index: cosmo/src/test/functional/windmill/event_properties.json
===================================================================
--- cosmo/src/test/functional/windmill/event_properties.json	(revision 3653)
+++ cosmo/src/test/functional/windmill/event_properties.json	(working copy)
@@ -1,8 +1,12 @@
-{"method": "click", "params": {"id" : "viewNavRight"}}
-{"method": "wait", "params": {"seconds" : 5000}}
+{"method": "click", "params": {"id" : "viewNavCenterRight"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "type", "params": {"id" : "eventtitle", "text": "Properties Test"}}
 {"method": "type", "params": {"id" : "starttime", "text": "9:00"}}
 {"method": "type", "params": {"id" : "endtime", "text": "4:00"}}
+{"method": "radio", "params": {"xpath" : "/html/body/div[2]/form/div[7]/div/div/div/div[10]/input[4]"}}
+{"method": "radio", "params": {"xpath" : "/html/body/div[2]/form/div[7]/div/div/div/div[8]/input[3]"}}
 {"method": "select", "params": {"id" : "status", "option": "Tentative"}}
 {"method": "type", "params": {"id" : "eventdescr", "text": "A description for the properties test"}}
+{"method": "click", "params": {"id" : "cosmo_Button_1"}}
\ No newline at end of file
Index: cosmo/src/test/functional/windmill/create_user_test.json
===================================================================
--- cosmo/src/test/functional/windmill/create_user_test.json	(revision 3653)
+++ cosmo/src/test/functional/windmill/create_user_test.json	(working copy)
@@ -1,13 +1,13 @@
 {"method": "click", "params": {"link" : "Log in to Cosmo"}}
-{"method": "wait", "params": {"seconds" : 3000}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
 {"method": "click", "params": {"link" : "Click here to create one."}}
-{"method": "click", "params": {"jsid" : "parent.frames[1].cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
-{"method": "type", "params": {"id" : "username", "text": "tester47"}}
-{"method": "type", "params": {"id" : "firstName", "text": "tester47"}}
-{"method": "type", "params": {"id" : "lastName", "text": "tester47"}}
-{"method": "type", "params": {"id" : "email", "text": "tester47@osafoundation.org"}}
+{"method": "click", "params": {"jsid" : "Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+{"method": "type", "params": {"id" : "username", "text": "tester"}}
+{"method": "type", "params": {"id" : "firstName", "text": "tester"}}
+{"method": "type", "params": {"id" : "lastName", "text": "tester"}}
+{"method": "type", "params": {"id" : "email", "text": "tester@osafoundation.org"}}
 {"method": "type", "params": {"id" : "password", "text": "tester"}}
 {"method": "type", "params": {"id" : "confirm", "text": "tester"}}
-{"method": "click", "params": {"jsid" : "parent.frames[1].cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
-{"method": "wait", "params": {"seconds" : 3000}}
-{"method": "click", "params": {"jsid" : "parent.frames[1].cosmo.app.modalDialog.btnsCenter[0].domNode.id"}}
\ No newline at end of file
+{"method": "click", "params": {"jsid" : "Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "click", "params": {"jsid" : "Windmill.TestingApp.cosmo.app.modalDialog.btnsCenter[0].domNode.id"}}
\ No newline at end of file
Index: cosmo/src/test/functional/windmill/login_with_user.json
===================================================================
--- cosmo/src/test/functional/windmill/login_with_user.json	(revision 3653)
+++ cosmo/src/test/functional/windmill/login_with_user.json	(working copy)
@@ -1,4 +1,6 @@
-{"method": "type", "params": {"id" : "loginDialogUsernameInput", "text": "tester47"}}
+{"method": "type", "params": {"id" : "loginDialogUsernameInput", "text": "tester"}}
 {"method": "type", "params": {"id" : "loginDialogPasswordInput", "text": "tester"}}
-{"method": "click", "params": {"id" : "loginSubmitButtonText"}}
-{"method": "wait", "params": {"seconds" : 3000}}
\ No newline at end of file
+{"method": "click", "params": {"id" : "loginSubmitButton"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
\ No newline at end of file
Index: cosmo/src/test/functional/windmill/initial_suite.json
===================================================================
--- cosmo/src/test/functional/windmill/initial_suite.json	(revision 3653)
+++ cosmo/src/test/functional/windmill/initial_suite.json	(working copy)
@@ -1,25 +1,56 @@
 {"method": "click", "params": {"link" : "Log in to Cosmo"}}
-{"method": "wait", "params": {"seconds" : 3000}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
 {"method": "click", "params": {"link" : "Click here to create one."}}
-{"method": "click", "params": {"jsid" : "parent.frames[1].cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
-{"method": "type", "params": {"id" : "username", "text": "tester99"}}
-{"method": "type", "params": {"id" : "firstName", "text": "tester99"}}
-{"method": "type", "params": {"id" : "lastName", "text": "tester99"}}
-{"method": "type", "params": {"id" : "email", "text": "tester99@osafoundation.org"}}
+{"method": "click", "params": {"jsid" : "{"method": "click", "params": {"jsid" : "Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+{"method": "type", "params": {"id" : "username", "text": "tester240"}}
+{"method": "type", "params": {"id" : "firstName", "text": "tester240"}}
+{"method": "type", "params": {"id" : "lastName", "text": "tester240"}}
+{"method": "type", "params": {"id" : "email", "text": "tester240@osafoundation.org"}}
 {"method": "type", "params": {"id" : "password", "text": "tester"}}
 {"method": "type", "params": {"id" : "confirm", "text": "tester"}}
-{"method": "click", "params": {"jsid" : "parent.frames[1].cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
-{"method": "wait", "params": {"seconds" : 3000}}
-{"method": "click", "params": {"jsid" : "parent.frames[1].cosmo.app.modalDialog.btnsCenter[0].domNode.id"}}
-{"method": "type", "params": {"id" : "loginDialogUsernameInput", "text": "tester99"}}
+{"method": "click", "params": {"jsid" : "{"method": "click", "params": {"jsid" : "Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+{"method": "wait", "params": {"milliseconds" : 3000}}
+{"method": "verify", "params": {"id" : "modalDialogPrompt", "validator" : "You have successfully created your Cosmo account."}}
+{"method": "click", "params": {"jsid" : "{"method": "click", "params": {"jsid" : "Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+Windmill.TestingApp.cosmo.app.modalDialog.btnsCenter[0].domNode.id"}}
+{"method": "type", "params": {"id" : "loginDialogUsernameInput", "text": "tester240"}}
 {"method": "type", "params": {"id" : "loginDialogPasswordInput", "text": "tester"}}
 {"method": "click", "params": {"id" : "loginSubmitButtonText"}}
-{"method": "wait", "params": {"seconds" : 3000}}
-{"method": "wait", "params": {"seconds" : 3000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
-{"method": "wait", "params": {"seconds" : 2000}}
-{"method": "doubleClick", "params": {"id" : "hourDiv2-0900"}}
-{"method": "wait", "params": {"seconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv4-1000"}}
-{"method": "wait", "params": {"seconds" : 2000}}
-{"method": "doubleClick", "params": {"id" : "hourDiv5-1100"}}
\ No newline at end of file
+{"method": "doubleClick", "params": {"id" : "hourDiv5-1100"}}
+{"method": "doubleClick", "params": {"id" : "hourDiv2-1300"}}
+{"method": "click", "params": {"id" : "viewNavCenterRight"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
+{"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
+{"method": "type", "params": {"id" : "eventtitle", "text": "Properties Test"}}
+{"method": "type", "params": {"id" : "startdate", "text": "02/09/2007"}}
+{"method": "type", "params": {"id" : "enddate", "text": "02/09/2007"}}
+{"method": "type", "params": {"id" : "starttime", "text": "6:00"}}
+{"method": "type", "params": {"id" : "endtime", "text": "11:30"}}
+{"method": "click", "params": {"id" : "startap"}}
+{"method": "click", "params": {"id" : "endap"}}
+{"method": "select", "params": {"id" : "status", "option": "Tentative"}}
+{"method": "type", "params": {"id" : "eventdescr", "text": "A description for the properties test"}}
+{"method": "click", "params": {"id" : "cosmo_Button_1Text"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
+{"method": "click", "params": {"link" : "Settings"}}
+{"method": "click", "params": {"id" : "cosmo_TabContainer_0_tab1"}}
+{"method": "click", "params": {"id" : "showAccountBrowser"}}
+{"method": "click", "params": {"id" : "cosmo_Button_4Text"}}
+{"method": "type", "params": {"id" : "jumpto", "text": "02/11/2008"}}
+{"method": "click", "params": {"id" : "cosmo_Button_2Text"}}
+{"method": "doubleClick", "params": {"id" : "hourDiv5-1100"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
+{"method": "click", "params": {"id" : "miniCal_month1_day19"}}
+{"method": "doubleClick", "params": {"id" : "hourDiv5-1100"}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
+{"method": "click", "params": {"xpath" : "/html/body/div[2]/form/div/div/span/div[2]/div[3]/img"}}
+{"method": "select", "params": {"xpath" : "/html/body/div[4]/div/div[4]/div/table/tbody/tr[3]/td[2]/div/select","option": "Other..."}}
+{"method": "click", "params": {"jsid" : "{"method": "click", "params": {"jsid" : "Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+Windmill.TestingApp.cosmo.app.modalDialog.btnsRight[0].domNode.id"}}
+{"method": "click", "params": {"link" : "Log Out"}}
Index: cosmo/src/test/functional/windmill/create_events_test.json
===================================================================
--- cosmo/src/test/functional/windmill/create_events_test.json	(revision 3653)
+++ cosmo/src/test/functional/windmill/create_events_test.json	(working copy)
@@ -1,25 +1,25 @@
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv3-2000"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv4-1000"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv5-1100"}}
-{"method": "click", "params": {"id" : "viewNavRight"}}
-{"method": "wait", "params": {"seconds" : 5000}}
+{"method": "click", "params": {"id" : "viewNavCenterRight"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv2-1100"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv4-1000"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv5-1100"}}
-{"method": "click", "params": {"id" : "viewNavRight"}}
-{"method": "wait", "params": {"seconds" : 5000}}
+{"method": "click", "params": {"id" : "viewNavCenterRight"}}
+{"method": "wait", "params": {"milliseconds" : 5000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1230"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1130"}}
-{"method": "wait", "params": {"seconds" : 2000}}
+{"method": "wait", "params": {"milliseconds" : 2000}}
 {"method": "doubleClick", "params": {"id" : "hourDiv1-1200"}}
\ No newline at end of file
Index: cosmo/src/main/java/org/osaf/cosmo/model/User.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/model/User.java	(revision 3653)
+++ cosmo/src/main/java/org/osaf/cosmo/model/User.java	(working copy)
@@ -122,6 +122,12 @@
      * A String indicating the results should be sorted by Date last Modified
      */
     public static final String LAST_MODIFIED_SORT_STRING = "Last Modified";
+    /**
+     * A String indicating the results should be sorted by Activated status
+     */
+    public static final String ACTIVATED_SORT_STRING = "Activated";
+    
+    
 
     /**
      * The Default Sort Type
@@ -134,6 +140,7 @@
     public static final String EMAIL_URL_STRING = "email";
     public static final String CREATED_URL_STRING = "created";
     public static final String LAST_MODIFIED_URL_STRING = "modified";
+    public static final String ACTIVATED_URL_STRING = "activated";
 
     private String uid;
     private String username;
@@ -646,7 +653,8 @@
         ADMIN (ADMIN_URL_STRING, ADMIN_SORT_STRING),
         EMAIL (EMAIL_URL_STRING, EMAIL_SORT_STRING),
         CREATED (CREATED_URL_STRING, CREATED_SORT_STRING),
-        LAST_MODIFIED (LAST_MODIFIED_URL_STRING, LAST_MODIFIED_SORT_STRING);
+        LAST_MODIFIED (LAST_MODIFIED_URL_STRING, LAST_MODIFIED_SORT_STRING),
+        ACTIVATED (ACTIVATED_URL_STRING, ACTIVATED_SORT_STRING);
 
         private final String urlString;
         private final String titleString;
@@ -677,6 +685,8 @@
                 return CREATED;
             } else if (string.equals(LAST_MODIFIED_URL_STRING)){
                 return LAST_MODIFIED;
+            } else if (string.equals(ACTIVATED_URL_STRING)){
+                return ACTIVATED;
             } else {
                 return null;
             }
Index: cosmo/src/main/java/org/osaf/cosmo/service/UserService.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/service/UserService.java	(revision 3653)
+++ cosmo/src/main/java/org/osaf/cosmo/service/UserService.java	(working copy)
@@ -17,6 +17,7 @@
 
 import java.util.Set;
 
+import org.osaf.cosmo.model.PasswordRecovery;
 import org.osaf.cosmo.model.User;
 import org.osaf.cosmo.service.account.ActivationContext;
 import org.osaf.cosmo.util.PageCriteria;
@@ -156,5 +157,34 @@
      * presentation as an authentication credential.
      */
     public String generatePassword();
-
+    
+    /**
+     * Returns the PasswordRecovery entity associated with the given password recovery key.
+     * 
+     * If the specified PasswordRecovery entity has expired, returns null after removing 
+     * the PasswordRecovery object from persistant storage.
+     * 
+     * @param key the password recovery key associated with the account to return
+     * @return the User associated with key
+     * @throws DataRetrievalFailureException if there is no user associated with this
+     * activation id.
+     */
+    public PasswordRecovery getPasswordRecovery(String key);
+    
+    /**
+     * Creates a PasswordRecovery entity in the repository.
+     * 
+     * Returns a new instance of the PasswordRecovery object after saving the original.
+     * 
+     * @param passwordRecovery the PasswordRecovery object to create in the repository.
+     */
+    public PasswordRecovery createPasswordRecovery(PasswordRecovery passwordRecovery);
+    
+    /**
+     * Deletes the specified PasswordRecovery object from the repository.
+     * 
+     * @param passwordRecovery the PasswordRecovery object to delete.
+     */
+    public void deletePasswordRecovery(PasswordRecovery passwordRecovery);
+    
 }
Index: cosmo/src/main/java/org/osaf/cosmo/dao/hibernate/UserDaoImpl.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/dao/hibernate/UserDaoImpl.java	(revision 3653)
+++ cosmo/src/main/java/org/osaf/cosmo/dao/hibernate/UserDaoImpl.java	(working copy)
@@ -33,6 +33,7 @@
 import org.osaf.cosmo.dao.UserDao;
 import org.osaf.cosmo.model.DuplicateEmailException;
 import org.osaf.cosmo.model.DuplicateUsernameException;
+import org.osaf.cosmo.model.PasswordRecovery;
 import org.osaf.cosmo.model.User;
 import org.osaf.cosmo.util.ArrayPagedList;
 import org.osaf.cosmo.util.PageCriteria;
@@ -196,6 +197,30 @@
             throw SessionFactoryUtils.convertHibernateAccessException(e);
         }
     }
+    
+    public void createPasswordRecovery(PasswordRecovery passwordRecovery){
+        
+        getSession().save(passwordRecovery);
+    }
+    
+    public PasswordRecovery getPasswordRecovery(String key){
+        try {
+            Query hibQuery = getSession().getNamedQuery("passwordRecovery.byKey")
+                    .setParameter("key", key);
+            hibQuery.setCacheable(true);
+            return (PasswordRecovery) hibQuery.uniqueResult();
+        } catch (HibernateException e) {
+            throw SessionFactoryUtils.convertHibernateAccessException(e);
+        }
+    }
+    
+    public void deletePasswordRecovery(PasswordRecovery passwordRecovery) {
+        try {
+            getSession().delete(passwordRecovery);
+        } catch (HibernateException e) {
+            throw SessionFactoryUtils.convertHibernateAccessException(e);
+        }
+    }
 
     public void destroy() {
         // TODO Auto-generated method stub
@@ -302,6 +327,8 @@
                 orders.add(createOrder(pageCriteria, "dateCreated"));
             else if (sort.equals(User.SortType.LAST_MODIFIED))
                 orders.add(createOrder(pageCriteria, "dateModified"));
+            else if (sort.equals(User.SortType.ACTIVATED))
+                orders.add(createOrder(pageCriteria, "activationId"));
             else
                 orders.add(createOrder(pageCriteria, "username"));
 
@@ -314,5 +341,4 @@
                    Order.desc(property);
         }
     }
-
 }
Index: cosmo/src/main/java/org/osaf/cosmo/dao/UserDao.java
===================================================================
--- cosmo/src/main/java/org/osaf/cosmo/dao/UserDao.java	(revision 3653)
+++ cosmo/src/main/java/org/osaf/cosmo/dao/UserDao.java	(working copy)
@@ -15,6 +15,7 @@
  */
 package org.osaf.cosmo.dao;
 
+import org.osaf.cosmo.model.PasswordRecovery;
 import org.osaf.cosmo.model.User;
 import org.osaf.cosmo.util.PageCriteria;
 import org.osaf.cosmo.util.PagedList;
@@ -127,4 +128,27 @@
      * @param user the user to remove
      */
     public void removeUser(User user);
+    
+    /**
+     * Creates a password recovery entity in the repository. Returns a new
+     * instance of <code>PasswordRecovery</code> after saving the original one.
+     *
+     * @param passwordRecovery the password recovery entity to save
+     */
+    public void createPasswordRecovery(PasswordRecovery passwordRecovery);
+    
+    /**
+     * Returns the password recovery entity identified by the given key.
+     * 
+     * @param key
+     * @return the passsword recovery entity identified by key
+     */
+    public PasswordRecovery getPasswordRecovery(String key);
+    
+    /**
+     * Delete <code>passwordRecovery</code> from the database.
+     * 
+     * @param passwordRecovery the password recovery entity to delete
+     */
+    public void deletePasswordRecovery(PasswordRecovery passwordRecovery);
 }
Index: cosmo/src/main/resources/PimMessageResources.properties
===================================================================
--- cosmo/src/main/resources/PimMessageResources.properties	(revision 3653)
+++ cosmo/src/main/resources/PimMessageResources.properties	(working copy)
@@ -220,13 +220,10 @@
 Main.CollectionDetails.atom=Atom
 Main.CollectionDetails.protocolInstructions=Subscribe with the appropriate URL below.
 Main.CollectionDetails.Save=Save
-Main.CollectionDetails.ChandlerDownloadUrl=http://chandler.osafoundation.org/downloadchandler.php
-Main.CollectionDetails.ChandlerUrl=http://chandler.osafoundation.org/
 Main.CollectionDetails.Help=Help
-Main.CollectionDetails.DownloadHere=DOWNLOAD HERE
-Main.CollectionDetails.DontHave=Don't Have
 Main.CollectionDetails.ClickHere=Click Here
 Main.CollectionDetails.HelpLink=http://wiki.osafoundation.org/Projects/CosmoHelpPortal06
+Main.CollectionDetails.ChandlerPlug=Don't Have Chandler? {0}Download Here{1}.
 Main.CollectionDetails.LinkImageToolTip=Link to '{0}'
 
 Ticket.Error.Privilege=You must select a privilege.
Index: cosmo/src/main/resources/applicationContext.xml
===================================================================
--- cosmo/src/main/resources/applicationContext.xml	(revision 3653)
+++ cosmo/src/main/resources/applicationContext.xml	(working copy)
@@ -126,6 +126,7 @@
             <value>org.osaf.cosmo.model.Ticket</value>
             <value>org.osaf.cosmo.model.TimestampAttribute</value>
             <value>org.osaf.cosmo.model.User</value>
+            <value>org.osaf.cosmo.model.PasswordRecovery</value>
         </list>
     </property>
     <property name="entityInterceptor">
Index: cosmo/src/main/webapp/js/cosmo/account/settings.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/account/settings.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/account/settings.js	(working copy)
@@ -267,10 +267,11 @@
         var form = _createElem('form');
         var div = _createElem('div');
         var nbsp = function () { return cosmo.util.html.nbsp(); };
+        var prefs = cosmo.account.preferences.getPreferences();
+        var checkedDefault = (prefs[cosmo.account.preferences.SHOW_ACCOUNT_BROWSER_LINK] == 'true');
         var check = cosmo.util.html.createInput({ type: 'checkbox', 
             id: 'showAccountBrowser', name: 'showAccountBrowser',  
-            value: '' });
-        var prefs = cosmo.account.preferences.getPreferences();
+            value: '', checked: checkedDefault });
         
         div.appendChild(check);
         div.appendChild(nbsp());
@@ -284,9 +285,6 @@
             cosmo.util.html.addInputsToForm([check], form);
         }
 
-        form.showAccountBrowser.checked = 
-            (prefs[cosmo.account.preferences.SHOW_ACCOUNT_BROWSER_LINK] 
-            == "true");
         return form;
     };
     
Index: cosmo/src/main/webapp/js/cosmo/view/cal/dialog.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/view/cal/dialog.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/view/cal/dialog.js	(working copy)
@@ -128,10 +128,9 @@
     this.getProps = function(key, optsParam) {
         var p = props[key]();
         var opts = optsParam || {};
-        var instanceOnly = opts.instanceOnly || false;
         if (key == 'saveRecurConfirm') {
             p.btnsRight = [];
-            if (instanceOnly) {
+            if (opts.instanceOnly || opts.recurrenceMod) {
                 p.btnsRight.push(buttons.allEventsDisabled());
                 p.btnsRight.push(buttons.saveFutureEvents());
             }
Index: cosmo/src/main/webapp/js/cosmo/view/cal.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/view/cal.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/view/cal.js	(working copy)
@@ -121,6 +121,7 @@
                 var opts = {};
                 opts.instanceOnly = false;
                 opts.masterEvent = false;
+                opts.recurrenceMod = false;
 
                 // Check to see if editing a recurrence instance to go
                 // beyond the recurrence interval -- in that case, the
@@ -138,6 +139,26 @@
                     ret = (diff >= bound || diff <= (bound * -1)) ? true : false;
                     return ret;
                 }
+                // There ought to be a better way to do this -- figure out if
+                // this event is a recurrence mod by poking through the 
+                // modifications array and seeing if its start date matches
+                // any of the existing mods' instanceDates
+                function isRecurrenceMod() {
+                    var ret = false;
+                    var mods = recur.modifications;
+                    var evDt = ev.data.instanceDate.getTime();
+                    if (mods && mods.length) {
+                        for (var i = 0; i < mods.length; i++) {
+                            var modDt = mods[i].instanceDate.getTime();
+                            if (modDt == evDt) {
+                                ret = true;
+                                break;
+                            }
+                        }
+                    }
+                    return ret;
+                }
+                
                 // Change to master event in recurrence
                 if (ev.data.masterEvent) {
                     opts.masterEvent = true;
@@ -146,6 +167,9 @@
                 else {
                     opts.instanceOnly = isOutOfIntervalRange();
                 }
+                
+                opts.recurrenceMod = isRecurrenceMod();
+
                 // Show the confirmation dialog
                 cosmo.app.showDialog(cosmo.view.cal.dialog.getProps('saveRecurConfirm', opts));
             }
Index: cosmo/src/main/webapp/js/cosmo/util/html.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/util/html.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/util/html.js	(working copy)
@@ -120,12 +120,12 @@
         }
         appendElem = parentNode;
     }
-
+    
     // IE falls down on DOM-method-generated
     // radio buttons and checkboxes
     // Old-skool with conditional branching and innerHTML
-    if (document.all && (type == 'radio' || type == 'checkbox')) {
-        str = '<input type="' + type + '"' +
+    if (document.all && (o.type == 'radio' || o.type == 'checkbox')) {
+        str = '<input type="' + o.type + '"' +
             ' name="' + o.name + '"' +
             ' id ="' + o.id + '"';
         if (o.size) {
@@ -134,10 +134,14 @@
         if (o.maxlength) {
             str += ' maxlength="' + o.maxlength + '"';
         }
+        if (o.checked) {
+            str += ' checked="checked"';
+        }
         if (o.className) {
             str += ' class="' + o.className + '"';
         }
-        str += '>';
+        str += '/>';
+        
         var s = document.createElement('span');
         s.innerHTML = str;
         input = s.firstChild;
Index: cosmo/src/main/webapp/js/cosmo/ui/widget/AuthBox.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/ui/widget/AuthBox.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/ui/widget/AuthBox.js	(working copy)
@@ -32,41 +32,51 @@
         _showPrompt: function (str, type) {
             cosmo.app.modalDialog.setPrompt(str, type);
         },
-        _handleAuthResp: function (str) {
-
-            // Auth failed -- bad password? Reset for retry
-            if (str == cosmo.env.getBaseUrl() + "/loginfailed"){
-                this._showErr(_('Login.Error.AuthFailed'));
-                this.passwordInput.value = '';
+        _handleAuthResp: function (type, data, obj) {
+            var str = data;
+            // Transport error
+            if (type == 'error') {
+                cosmo.app.hideDialog();
+                cosmo.app.showErr(data.message);
+                return false;
             }
-            // Auth successful -- try to do whatever action
-            // was contingent on the auth
+            // Request succeeded
             else {
-                cosmo.util.auth.setCred(this.usernameInput.value, 
-                                        this.passwordInput.value);
-                                        
-                this.attemptAuthAction(this.authAction.attemptParams);
+                // Auth failed -- bad password? Reset for retry
+                if (str == cosmo.env.getBaseUrl() + "/loginfailed"){
+                    this._showErr(_('Login.Error.AuthFailed'));
+                    this.passwordInput.value = '';
+                }
+                // Auth successful -- try to do whatever action
+                // was contingent on the auth
+                else {
+                    cosmo.util.auth.setCred(this.usernameInput.value, 
+                                            this.passwordInput.value);
+                                            
+                    this.attemptAuthAction(this.authAction.attemptParams);
+                }
             }
         },
         _attemptOrHandle: function (type, args) {
             var res = null;
-            // If this is just a plain ol' function, execute it inline here
+            var f = this.authAction[type + 'Func'];
+            var a = args || []; // Can't pass args to IE6 if it's undefined
+            var context = null;
+            // If this is just a plain ol' function, execute in window context 
             if (this.authAction.execInline) {
-                res = this.authAction[type + 'Func'].apply(null, args);
+                context = window;
             }
-            // Otherwise it's a method to execute in an obj context 
+            // If execution context got passed in, apply the method
+            // to that object
+            else if (this.authAction.execContext) {
+                context = this.authAction.execContext;
+            }
+            // No execution context -- execute the method in the
+            // context of the AuthBox itself
             else {
-                // If execution context got passed in, apply the method
-                // to that object
-                if (this.authAction.execContext) {
-                    res = this.authAction[type + 'Func'].apply(this.authAction.execContext, args);
-                }
-                // No execution context -- execute the method in the
-                // context of the AuthBox itself
-                else {
-                    res = this.authAction[type + 'Func'].apply(this, args);
-                }
+                context = this;
             }
+            res = f.apply(context, a);
             return res;
         },
         attemptAuthAction: function (args) {
@@ -112,8 +122,8 @@
                     url: self.authProc,
                     method: 'POST',
                     content: postData,
-                    load: function(type, data, obj) { self._handleAuthResp(data); },
-                    error: function(type, error) { alert(error.message); }
+                    load: function(type, data, obj) { self._handleAuthResp(type, data, obj); },
+                    error: function(type, data, obj) { self._handleAuthResp(type, data, obj); }
                 });
             }
             return false;
Index: cosmo/src/main/webapp/js/cosmo/ui/widget/CollectionDetailsDialog.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/ui/widget/CollectionDetailsDialog.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/ui/widget/CollectionDetailsDialog.js	(working copy)
@@ -77,13 +77,12 @@
             atom:_("Main.CollectionDetails.atom"),
             protocolInstructions:_("Main.CollectionDetails.protocolInstructions"),
             helpLink:_("Main.CollectionDetails.HelpUrl"),
-            chandlerLink:_("Main.CollectionDetails.ChandlerUrl"),
-            chandlerDownloadLink:_("Main.CollectionDetails.ChandlerDownloadUrl"),
             help:_("Main.CollectionDetails.Help"),
-            downloadHere:_("Main.CollectionDetails.DownloadHere"),
-            dontHave:_("Main.CollectionDetails.DontHave"),
             clickHere:_("Main.CollectionDetails.ClickHere"),
-            helpLink:_("Main.CollectionDetails.HelpLink")
+            helpLink:_("Main.CollectionDetails.HelpLink"),
+            chandlerPlug: _('Main.CollectionDetails.ChandlerPlug', 
+                '<span style="font-variant:small-caps;"><a href="http://chandler.osafoundation.org/">', 
+                '</a></span>')
         },
         
         clientsToProtocols: {
@@ -119,6 +118,11 @@
            }
            this.clientSelector.selectedIndex = selectedIndex;
            
+           // Chandler plug contains a URL path with quotes. The Dojo widget
+           // template variable substitution 'helpfully' escapes these into
+           // two quotes each
+           this.chandlerPlug.innerHTML = '| ' + this.strings.chandlerPlug;
+
            this._handleClientChanged();
         },
         
Index: cosmo/src/main/webapp/js/cosmo/ui/widget/templates/CollectionDetailsDialog/CollectionDetailsDialog.html
===================================================================
--- cosmo/src/main/webapp/js/cosmo/ui/widget/templates/CollectionDetailsDialog/CollectionDetailsDialog.html	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/ui/widget/templates/CollectionDetailsDialog/CollectionDetailsDialog.html	(working copy)
@@ -111,12 +111,11 @@
     </table>
     <div dojoAttachPoint="helpText" style="visibility: hidden; position:absolute; top:0px; left:0px">
          <a href="${this.strings.helpLink}">${this.strings.help}</a>
-    <span dojoAttachPoint="chandlerPlug" style="display:none">| ${this.strings.dontHave}
-        <a href="${this.strings.chandlerLink}">Chandler</a>? 
-        <a href="${this.strings.chandlerDownloadLink}"> 
-            <span style="font-size: 9px">${this.strings.downloadHere}</span>
-        </a>
-    </span>
+        <span dojoAttachPoint="chandlerPlug" style="display:none"><!-- 
+            Don't use Dojo widget string substitution with anchor tags -
+            it 'helpfully' escapes the quotes in the href prop
+            Have to insert as innerHTML during fillInTemplate
+            --></span>
     </div>
 </div>
 
Index: cosmo/src/main/webapp/js/cosmo/ui/widget/CollectionSelector.js
===================================================================
--- cosmo/src/main/webapp/js/cosmo/ui/widget/CollectionSelector.js	(revision 3653)
+++ cosmo/src/main/webapp/js/cosmo/ui/widget/CollectionSelector.js	(working copy)
@@ -106,34 +106,26 @@
                         // Action to take after successful auth -- try to add the
                         // collection subscription
                         attemptFunc: function () {
-                            // Special Doug Henning section -- some closure to get the
-                            // callback from the async response to exec in the AuthBox
-                            // scope. Here I'm going back into the AuthBox to call
-                            // the response handler, which just executes successFunc below
-                            // I could just set up an anon function here to handle the
-                            // response, but I think it's clearer having a success handler 
-                            // specifically defined
-                            var self = this; // Reference to the AuthBox
-                            var n = function (a, b, c) {
-                                self.handleAuthActionResp.apply(self, [a, b, c]) 
+                            var self = this; // 'self' is CollectionSelector
+                            // Handler function for attempt to add collection
+                            // If it's added successfully, log the user in to look at it
+                            var n = function (nothingParam, err, requestId) {
+                                var msg = self.authAction.successPrompt;
+                                if (err) {
+                                    cosmo.app.hideDialog();
+                                    cosmo.app.showErr(self.strings.collectionAddError, err);
+                                    return false;
+                                }
+                                else {
+                                    // Log the user into Cosmo and display the current collection
+                                    self._showPrompt(msg);
+                                    location = cosmo.env.getBaseUrl() + '/pim/collection/' + curr.collection.uid;
+                                }
                             };
                             Cal.serv.saveSubscription(n, curr.collection.uid, passedKey, 
                                 curr.displayName)
                         },
                         attemptPrompt: strings.attemptPrompt, 
-                        successFunc: function (whatIsThisParam, err, requestId) {
-                            var msg = this.authAction.successPrompt; // 'this' is the AuthBox
-                            if (err) {
-                                cosmo.app.hideDialog();
-                                cosmo.app.showErr(strings.collectionAddError, err);
-                                return false;
-                            }
-                            else {
-                                // Log the user into Cosmo and display the current collection
-                                this._showPrompt(msg);
-                                location = cosmo.env.getBaseUrl() + '/pim/collection/' + curr.collection.uid;
-                            }
-                        },
                         successPrompt: strings.successPrompt };
                     f = function () {
                         var authBoxProps = cosmo.ui.widget.AuthBox.getInitProperties(authAction);
Index: snarf/src/bin/osafsrvctl.bat
===================================================================
--- snarf/src/bin/osafsrvctl.bat	(revision 3653)
+++ snarf/src/bin/osafsrvctl.bat	(working copy)
@@ -22,6 +22,8 @@
 goto end
 :okHome
 
+if not exist "%OSAFSRV_HOME%\logs" md "%OSAFSRV_HOME%\logs"
+
 rem tomcat is found one level above this directory
 set CATALINA_HOME=%OSAFSRV_HOME%\tomcat
 set CATALINA_BIN=%CATALINA_HOME%\bin
@@ -29,6 +31,8 @@
 
 set EXECUTABLE=%CATALINA_BIN%\%TOMCAT_SCRIPT%
 
+if not exist "%CATALINA_HOME%\temp" md "%CATALINA_HOME%\temp"
+
 rem Check that target executable exists
 if exist "%EXECUTABLE%" goto okExec
 echo Cannot find %EXECUTABLE%
