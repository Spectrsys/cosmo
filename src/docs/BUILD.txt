
                            Cosmo Sharing Server 0.1
                               Build Instructions


SETUP
=====

To set up your environment for Cosmo development, perform the
following steps:


(1) If your operating system does not already provide it, download and
    install a Java Runtime Environment (version 1.4 or later)

    * Download a JRE release from

        http://java.sun.com/j2se/

    * Install the JRE according to the instructions included with the
      release.

    * Set an environment variable JAVA_HOME to the pathname of the
      directory into which you installed the JDK release.

(2) If your operating system does not already it, download and 
    install the Ant build tool (version 1.6.2 or later)

    * Download an Ant release from:

        http://ant.apache.org/

    * Install Ant according to the instructions included with the
      release.

    * Set an environment variable ANT_HOME to the pathname of the
      Ant installation directory.

    * Add $ANT_HOME/bin to your PATH.

(3) Download and install the Ant Tasks for Maven (version 2.0 or
    later)

    * Download a release from:

        http://maven.apache.org/maven2/ant-tasks.html

      Make sure to get maven-artifact-ant-x.x-dep.jar, not the full
      maven distribution. There is a separate link for this jar on
      the download page.

    * Copy the jar into $ANT_HOME/lib.

(4) Download and install the JUnit test framework (version 3.8.1 or
    later)

    * Download a JUnit release from:

        http://junit.org/

    * Copy the junit jar into $ANT_HOME/lib.


SOURCE CODE
===========

Find instructions for accessing the OSAF CVS repository here (search
for "Source"):

    http://wiki.osafoundation.org/bin/view/Chandler/GettingChandler

The Cosmo module is "server".


BUILD
=====

The build script is build.xml in the root directory of the
module. Default build properties are set in build.properties. You can
customize your build by providing a my.properties file in the same
directory (see CUSTOMIZE below).

The most commonly-used targets are:

  build                compile all source code
  clean                remove all compiled source code and helper files
  test                 run all tests
  dist                 package the distribution
  dist-clean           remove the distribution package and helper files

A full set of targets can be examined with 'ant -projecthelp'.


TEST
====

There aren't too many tests yet, but those that exist can be run with
'ant test'. Before doing so, however, you will need to initialize the
test database with 'ant test-dbsetup'. Do these as separate ant calls,
however, because otherwise the forked JUnit JVM will not have access
to the hsqldb embedded within the original Ant process.

JUnit writes detailed test output in XML format to
core/test/data/. This, and the brief console output it generates
should be more than enough to debug test failures.


RUN
===

'ant dist' creates a dist/ subdirectory containing an unpacked
distribution (cosmo-x.x/). You can run Cosmo right out of this
directory with 'dist/cosmo-x.x/bin/cosmoctl start'. See INSTALL.txt
for more details on running Cosmo.


RELEASE
=======

'ant dist-release' creates a packaged distribution of the Tomcat
bundle at dist/cosmo-x.x.tar.gz. A separate unbundled WAR file will
come in a future version.


CUSTOMIZE
=========

All of the following customizations are placed in my.properties,
overriding the properties set in build.properties.

Some common development customizations:

    compile.debug=true
    cosmo.webapp.reloadable=true
    cosmo.serverAdmin=<me@my.host>

Ant downloads a copy of Tomcat to package the bundled
distribution. You can override the following properties to specify
your favorite mirror and/or choose a different version of Tomcat (but
beware the latter - see the compatibility notes in README.txt):

    ext.tomcat.package=jakarta-tomcat-5.0.28
    ext.tomcat.url=http://www.ibiblio.org/pub/mirrors/apache/jakarta/tomcat-5/v5.0.28/bin/${ext.tomcat.package}.tar.gz

If you happen to be hacking on Jackrabbit as well, you probably want
to point the Cosmo build at your Jackrabbit build instead of the
bundled jars. Here's one way to do that:

    maven.repository=${user.home}/.maven/repository
    jackrabbit.jar=${maven.repository}/jackrabbit/jars/jackrabbit-0.16.2-dev.jar
    jcr.jar=${maven.repository}/jsr170/jars/jcr-0.16.2.jar
    jcr-server.jar=${maven.repository}/jcr-server/jars/jcr-server-0.16.2.jar
    jcr-webdav.jar=${maven.repository}/jcr-server/jars/jcr-webdav-0.16.2.jar


$Id$
