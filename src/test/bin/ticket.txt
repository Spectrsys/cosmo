TICKET compliance tests

http://wiki.osafoundation.org/bin/view/Projects/CosmoTickets

    # Tests still TODO (from cosmo 0.2 spec):
    # -make sure MKTICKET request only shows tickets for current account
    # -make sure ticket timeouts followed
    # -make sure PROPFIND on ticketdiscovery property not supported
    # -make sure that visits element always returns infinity
    # -make sure that http://www.xythos.com/namespaces/StorageServer is used for 
    #  the ticketdiscovery, ticketinfo, id and timeout elements
    # -valid values for timeout element are infinity and Seconds-xxxx
    # -if different ticket in headers and URL, URL is used
    #
    # Also more tests from ticket spec.


First, bring the framework environment

    >>> from silmut import *


Initialization
    
    >>> import base64, time
    >>> auth = 'Basic %s' % base64.encodestring('%s:%s' % (user1, password1)).strip()
    >>> authHeaders = {'Authorization': auth}
    >>> auth2 = 'Basic %s' % base64.encodestring('%s:%s' % (user2, password2)).strip()
    >>> authHeaders2 = {'Authorization': auth2}
    >>> minTicket = """<?xml version="1.0" encoding="UTF-8"?>
    ... <X:ticketinfo xmlns:D="DAV:" 
    ...               xmlns:X="http://www.xythos.com/namespaces/StorageServer">
    ... <D:privilege><D:read/></D:privilege>
    ... <X:timeout>Second-60</X:timeout>
    ... </X:ticketinfo>"""
    >>> badNSTicket = """<?xml version="1.0" encoding="UTF-8"?>
    ... <D:ticketinfo xmlns:D="DAV:">
    ... <D:privilege><D:read/></D:privilege>
    ... <D:timeout>Second-60</D:timeout>
    ... </D:ticketinfo>"""
    >>> home1 = '%s/home/%s/' % (path, user1)
    >>> home2 = '%s/home/%s/' % (path, user2)
    
MKTICKET

Status codes

OK

    >>> r = request('MKTICKET', home1, body=minTicket,
    ...             headers=authHeaders)
    >>> r.status # MKTICKET OK
    200
    >>> ticket = r.getheader('Ticket')

Bad XML

    >>> r = request('MKTICKET', home1, body=badNSTicket,
    ...             headers=authHeaders)
    >>> r.status # MKTICKET bad XML
    400

No XML body

    >>> r = request('MKTICKET', home1, headers=authHeaders)
    >>> r.status # MKTICKET no body
    400
    
No access privileges

    >>> r = request('MKTICKET', home2, body=minTicket,
    ...             headers=authHeaders)
    >>> r.status # MKTICKET no access
    403

No access privileges, no body
    
    >>> r = request('MKTICKET', home2, headers=authHeaders)
    >>> r.status # MKTICKET no access, no body
    403

No such resource, no body

    >>> r = request('MKTICKET', '%s%s' % (home1, 'doesnotexist'),
    ...              headers=authHeaders)
    >>> r.status # MKTICKET no such resource, no body
    404

No such resource

    >>> r = request('MKTICKET', '%s%s' % (home1, 'doesnotexist'), 
    ...             body=minTicket, headers=authHeaders)
    >>> r.status # MKTICKET no such resource
    404
    
No access, no such resource

    >>> r = request('MKTICKET', '%s%s' % (home2, 'doesnotexist'),
    ...             headers=authHeaders)
    >>> r.status # MKTICKET no access, no such resource
    403

GET with OK ticket
    
    >>> t = authHeaders.copy()
    >>> t['Ticket'] = ticket
    >>> r = request('GET', '%s?ticket=%s' % (home1, ticket),
    ...             headers=t)
    >>> r.status # GET OK
    200

#GET with nonexisting ticket
#    
#    >>> t = authHeaders.copy()
#    >>> nosuchticket = 'nosuchticket5dfe45210787'
#    >>> t['Ticket'] = nosuchticket
#    >>> r = request('GET', '%s?ticket=%s' % (home1, nosuchticket),
#    ...             headers=t)
#    >>> r.status # GET no such ticket
#    412


DELTICKET

Status Codes

No access

    >>> t = authHeaders2.copy()
    >>> t['Ticket'] = ticket
    >>> r = request('DELTICKET', '%s?ticket=%s' % (home1, ticket),
    ...             headers=t)
    >>> r.status # DELTICKET no access
    403
        
OK (No Content)

    >>> t = authHeaders.copy()
    >>> t['Ticket'] = ticket
    >>> r = request('DELTICKET', '%s?ticket=%s' % (home1, ticket),
    ...             headers=t)
    >>> r.status # DELTICKET OK (No Content)
    204
    
Ticket does not exist

    >>> t = authHeaders.copy()
    >>> nosuchticket = 'nosuchticket5dfe45210787'
    >>> t['Ticket'] = nosuchticket
    >>> r = request('DELTICKET', '%s?ticket=%s' % (home1, nosuchticket),
    ...             headers=t)
    >>> r.status # DELTICKET no such ticket
    412
    
Ticket does not exist, body

    >>> t = authHeaders.copy()
    >>> t['Ticket'] = 'nosuchticket5dfe45210787'
    >>> r = request('DELTICKET', '%s?ticket=%s' % (home1, nosuchticket),
    ...             body=minTicket, headers=t)
    >>> r.status # DELTICKET no such ticket, body
    412
    
Ticket does not exist, resource does not exist

    >>> t = authHeaders.copy()
    >>> t['Ticket'] = 'nosuchticket5dfe45210787'
    >>> r = request('DELTICKET', '%sdoesnotexist?ticket=%s' % (home1, nosuchticket),
    ...             headers=t)
    >>> r.status # DELTICKET no such ticket or resource
    404
    
Ticket does not exist, resource does not exist, body

    >>> t = authHeaders.copy()
    >>> t['Ticket'] = 'nosuchticket5dfe45210787'
    >>> r = request('DELTICKET', '%sdoesnotexist?ticket=%s' % (home1, nosuchticket),
    ...             body=minTicket, headers=t)
    >>> r.status # DELTICKET no such ticket or resource, body
    404


Miscellaneous

Try to delete an already deleted ticket

    >>> r = request('MKTICKET', home1, body=minTicket,
    ...             headers=authHeaders)
    >>> r.status # MKTICKET OK
    200
    >>> ticket = r.getheader('Ticket')
    >>> t = authHeaders.copy()
    >>> t['Ticket'] = ticket
    >>> r = request('DELTICKET', '%s?ticket=%s' % (home1, ticket),
    ...             headers=t)
    >>> r.status # DELTICKET OK (No Content)
    204
    >>> r = request('DELTICKET', '%s?ticket=%s' % (home1, ticket),
    ...             headers=t)
    >>> r.status # DELTICKET ticket already deleted
    412
    
Mismatched ticket in URL and header

    >>> r = request('MKTICKET', home1, body=minTicket,
    ...             headers=authHeaders)
    >>> r.status # MKTICKET OK
    200
    >>> ticket = r.getheader('Ticket')
    >>> r = request('MKTICKET', home1, body=minTicket,
    ...             headers=authHeaders)
    >>> r.status # MKTICKET OK
    200
    >>> ticket2 = r.getheader('Ticket')
    >>> t = authHeaders.copy()
    >>> t['Ticket'] = ticket
    >>> r = request('DELTICKET', '%s?ticket=%s%s' % (home1, 'nosuch', ticket),
    ...             headers=t)
    >>> r.status # DELTICKET nonexisting ticket in URL, ok in header
    412
    >>> r = request('DELTICKET', '%s?ticket=%s' % (home1, ticket2),
    ...             headers=t)
    >>> r.status # DELTICKET OK, URL ticket differs from header
    204
    >>> r = request('DELTICKET', '%s?ticket=%s' % (home1, ticket2),
    ...             headers=t)
    >>> r.status # DELTICKET ticket already deleted
    412
    >>> r = request('DELTICKET', '%s?ticket=%s' % (home1, ticket),
    ...             headers=t)
    >>> r.status # DELTICKET OK (No Content)
    204
    >>> r = request('DELTICKET', '%s?ticket=%s' % (home1, ticket),
    ...             headers=t)
    >>> r.status # DELTICKET ticket already deleted
    412
    
GET a resource with ticket

    >>> r = request('MKTICKET', home1, body=minTicket,
    ...             headers=authHeaders)
    >>> r.status # MKTICKET OK
    200
    >>> ticket = r.getheader('Ticket')
    >>> t = authHeaders.copy()
    >>> t['Ticket'] = ticket
    >>> r = request('GET', '%s?ticket=%s' % (home1, ticket),
    ...             headers=t)
    >>> r.status # GET with ticket OK
    200
    
#GET with timed out ticket
#
#    >>> time.sleep(61)
#    >>> r = request('GET', '%s?ticket=%s' % (home1, ticket),
#    ...             headers=t)
#    >>> r.status # GET ticket timed out
#    412
#    
#DELTICKET the timed out ticket
#
#    >>> r = request('DELTICKET', '%s?ticket=%s' % (home1, ticket),
#    ...             headers=t)
#    >>> r.status # DELTICKET ticket already timed out
#    412
