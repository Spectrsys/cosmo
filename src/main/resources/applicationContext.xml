<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
          "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
    Copyright 2005-2006 Open Source Applications Foundation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<beans>
  <bean id="messageSource"
        class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basename">
      <value>MessageResources</value>
    </property>
  </bean>

  <!-- load the cosmo properties file and make the cosmo
       config properties available to other spring beans -->

  <bean id="cosmoConfigPath"
        class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName">
      <value>cosmo/config</value>
    </property>
    <property name="resourceRef">
      <value>true</value>
    </property>
  </bean>

  <bean id="propertyPlaceholderConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <ref local="cosmoConfigPath"/>
      </list>
    </property>
  </bean>

  <!-- resources needed to send mail -->

  <bean id="mailSession"
        class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName">
      <value>mail/cosmo</value>
    </property>
    <property name="resourceRef">
      <value>true</value>
    </property>
  </bean>

  <bean id="mailSender"
        class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <property name="session">
      <ref local="mailSession"/>
    </property>
  </bean>

  <!-- resources needed for database access -->

  <bean id="jdbcDataSource"
        class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="java:comp/env/jdbc/cosmo"/>
  </bean>

  <bean id="defaultLobHandler"
        class="org.osaf.cosmo.hibernate.CosmoLobHandler">
  </bean>

  <bean id="validatePreUpdateEventListener"
      class="org.hibernate.validator.event.ValidatePreUpdateEventListener"/>

  <bean id="validatePreInsertEventListener"
      class="org.hibernate.validator.event.ValidatePreInsertEventListener"/>

  <bean id="cosmoHibernateInterceptor"
      class="org.osaf.cosmo.hibernate.CosmoInterceptor"/>

  <bean id="sessionFactory"
        class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
    <property name="lobHandler" ref="defaultLobHandler" />
    <property name="annotatedPackages">
        <list>
            <value>org.osaf.cosmo.model</value>
        </list>
    </property>
    <property name="annotatedClasses">
        <list>
            <value>org.osaf.cosmo.model.Attribute</value>
            <value>org.osaf.cosmo.model.BinaryAttribute</value>
            <value>org.osaf.cosmo.model.BooleanAttribute</value>
            <value>org.osaf.cosmo.model.CalendarAttribute</value>
            <value>org.osaf.cosmo.model.CalendarCollectionStamp</value>			
            <value>org.osaf.cosmo.model.CalendarPropertyIndex</value>
            <value>org.osaf.cosmo.model.CalendarTimeRangeIndex</value>
            <value>org.osaf.cosmo.model.CollectionItem</value>
            <value>org.osaf.cosmo.model.CollectionSubscription</value>
            <value>org.osaf.cosmo.model.ContentData</value>
            <value>org.osaf.cosmo.model.ContentItem</value>
            <value>org.osaf.cosmo.model.DateAttribute</value>
            <value>org.osaf.cosmo.model.DecimalAttribute</value>
            <value>org.osaf.cosmo.model.DictionaryAttribute</value>
            <value>org.osaf.cosmo.model.EventStamp</value>
            <value>org.osaf.cosmo.model.HomeCollectionItem</value>
            <value>org.osaf.cosmo.model.IntegerAttribute</value>
            <value>org.osaf.cosmo.model.Item</value>
            <value>org.osaf.cosmo.model.MessageStamp</value>
            <value>org.osaf.cosmo.model.MultiValueStringAttribute</value>
            <value>org.osaf.cosmo.model.NoteItem</value>
            <value>org.osaf.cosmo.model.ServerProperty</value>
            <value>org.osaf.cosmo.model.StringAttribute</value>
            <value>org.osaf.cosmo.model.Stamp</value>
            <value>org.osaf.cosmo.model.TaskStamp</value>
            <value>org.osaf.cosmo.model.TextAttribute</value>
            <value>org.osaf.cosmo.model.Ticket</value>
            <value>org.osaf.cosmo.model.TimestampAttribute</value>
            <value>org.osaf.cosmo.model.User</value>
        </list>
    </property>
    <property name="entityInterceptor">
      <ref bean="cosmoHibernateInterceptor"/>
    </property>
    <property name="eventListeners">
      <map>
        <entry key="pre-update">
          <ref local="validatePreUpdateEventListener"/>
        </entry>
        <entry key="pre-insert">
          <ref local="validatePreInsertEventListener"/>
        </entry>
      </map>
    </property>
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.generate_statistics">true</prop>
        <prop key="hibernate.cache.use_query_cache">true</prop>
        <prop key="hibernate.cache.use_second_level_cache">true</prop>
        <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
        <prop key="hibernate.show_sql">false</prop>

        <!-- configure in cosmo.propeties -->
        <prop key="hibernate.dialect">${cosmo.hibernate.dialect}</prop>
      </props>
    </property>
    <property name="dataSource">
      <ref bean="jdbcDataSource"/>
    </property>
  </bean>

  <!-- Define MBeans to export -->
  <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter">
    <property name="beans">
      <map>
        <entry key="cosmo:name=hibernate" value-ref="hibernateStatsBean"/>
      </map>
    </property>
  </bean>

  <!-- Hibernate statistics MBean -->
  <bean id="hibernateStatsBean" class="org.hibernate.jmx.StatisticsService">
    <property name="sessionFactory">
      <ref bean="sessionFactory"/>  
    </property>
  </bean>

  <!-- Transaction manager for a single Hibernate SessionFactory
       (alternative to JTA) -->
  <bean id="transactionManager"
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory">
      <ref local="sessionFactory" />
    </property>
  </bean>

  <!--  Interceptor for measuring performance of dao methods -->
  <bean id="performanceInterceptor"
        class="org.springframework.aop.interceptor.PerformanceMonitorInterceptor">
    <property name="loggerName" value="org.osaf.cosmo.perf" />
  </bean>

  <!-- This is the base transaction proxy factory bean, all
       transactional managers use this bean definition. -->
  <bean id="txProxyTemplate" abstract="true"
        class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
    <property name="transactionManager">
      <ref bean="transactionManager" />
    </property>
    <property name="transactionAttributes">
      <props>
        <prop key="save*">PROPAGATION_REQUIRED</prop>
        <prop key="store*">PROPAGATION_REQUIRED</prop>
        <prop key="remove*">PROPAGATION_REQUIRED,-OverlordDeletionException</prop>
        <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
        <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
        <prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
        <prop key="*">PROPAGATION_REQUIRED</prop>
      </props>
    </property>
    <property name="preInterceptors">
      <list>
        <ref local="performanceInterceptor" />
      </list>
    </property>
    <property name="postInterceptors">
      <list></list>
    </property>
  </bean>

  <!-- data access objects -->

  <bean id="hibernateTemplate"
        class="org.springframework.orm.hibernate3.HibernateTemplate">
    <constructor-arg><ref bean="sessionFactory"/></constructor-arg>
  </bean>

  <bean id="itemPathTranslator"
        class="org.osaf.cosmo.dao.hibernate.DefaultItemPathTranslator">
    <constructor-arg><ref bean="hibernateTemplate"/></constructor-arg>
  </bean>

  <bean id="idGenerator"
        class="org.apache.commons.id.uuid.VersionFourGenerator" />
  
  <bean id="ticketKeyGenerator"
        class="org.apache.commons.id.random.SessionIdGenerator" />

  <bean id="serverPropertyDao"
        class="org.osaf.cosmo.dao.hibernate.ServerPropertyDaoImpl"
        init-method="init"
        destroy-method="destroy">
    <property name="sessionFactory">
      <ref bean="sessionFactory" />
    </property>
  </bean>

  <bean id="contentDao"
        class="org.osaf.cosmo.dao.hibernate.ContentDaoImpl"
        init-method="init"
        destroy-method="destroy">
    <property name="sessionFactory">
      <ref bean="sessionFactory" />
    </property>
    <property name="itemPathTranslator">
      <ref bean="itemPathTranslator" />
    </property>
    <property name="idGenerator">
      <ref local="idGenerator" />
    </property>
    <property name="ticketKeyGenerator">
      <ref local="ticketKeyGenerator" />
    </property>
    <property name="calendarIndexer">
      <ref bean="calendarIndexer" />
    </property>
  </bean>

  <bean id="userDao"
        class="org.osaf.cosmo.dao.hibernate.UserDaoImpl"
        init-method="init"
        destroy-method="destroy">
    <property name="sessionFactory">
      <ref bean="sessionFactory" />
    </property>
    <property name="idGenerator">
      <ref local="idGenerator" />
    </property>
  </bean>

  <bean id="calendarIndexer"
        class="org.osaf.cosmo.dao.hibernate.DefaultCalendarIndexer" />

  <bean id="calendarFilterTranslator"
        class="org.osaf.cosmo.dao.hibernate.SQLCalendarFilterTranslator">
    <property name="booleanTrueValue">
        <value>${cosmo.hibernate.sql.booleanStringValue}</value>
    </property>
  </bean>

  <bean id="calendarDao"
        class="org.osaf.cosmo.dao.hibernate.CalendarDaoImpl"
        init-method="init">
    <property name="sessionFactory">
      <ref bean="sessionFactory" />
    </property>
    <property name="calendarFilterTranslator">
      <ref bean="calendarFilterTranslator" />
    </property>
  </bean>

  <!-- services -->

  <bean id="passwordGenerator"
        class="org.apache.commons.id.random.SessionIdGenerator"/>

  <bean id="accountActivator"
        class="org.osaf.cosmo.service.account.EmailAccountActivator">
    <property name="idGenerator">
      <ref local="idGenerator" />
    </property>
    <property name="mailSender">
      <ref local="mailSender" />
    </property>
    <property name="messageSource">
      <ref local="messageSource" />
    </property>

  </bean>

  <bean id="userService" parent="txProxyTemplate">
    <property name="proxyInterfaces">
      <value>org.osaf.cosmo.service.UserService</value>
    </property>
    <property name="target">
      <ref local="userServiceTarget" />
    </property>
  </bean>

  <bean id="userServiceTarget"
        class="org.osaf.cosmo.service.impl.StandardUserService"
        init-method="init"
        destroy-method="destroy">
    <property name="contentDao">
      <ref bean="contentDao"/>
    </property>
    <property name="userDao">
      <ref bean="userDao"/>
    </property>
    <property name="passwordGenerator">
      <ref bean="passwordGenerator"/>
    </property>
    <property name="accountActivator">
      <ref bean="accountActivator"/>
    </property>
    <property name="accountActivationRequired">
        <value>${cosmo.service.account.requireActivation}</value>
    </property>
  </bean>

  <bean id="contentLockManager"
        class="org.osaf.cosmo.service.lock.SingleVMLockManager"/>

  <bean id="contentService" parent="txProxyTemplate">
    <property name="proxyInterfaces">
      <value>org.osaf.cosmo.service.ContentService</value>
    </property>
    <property name="target">
      <ref local="contentServiceTarget" />
    </property>
  </bean>

  <bean id="contentServiceTarget"
        class="org.osaf.cosmo.service.impl.StandardContentService"
        init-method="init"
        destroy-method="destroy">
    <property name="calendarDao">
      <ref bean="calendarDao"/>
    </property>
    <property name="contentDao">
      <ref bean="contentDao"/>
    </property>
    <property name="lockManager">
      <ref bean="contentLockManager"/>
    </property>
  </bean>

  <bean id="serverPropertyService" parent="txProxyTemplate">
    <property name="proxyInterfaces">
      <value>org.osaf.cosmo.service.ServerPropertyService</value>
    </property>
    <property name="target">
      <ref local="serverPropertyServiceTarget" />
    </property>
  </bean>

  <bean id="serverPropertyServiceTarget"
        class="org.osaf.cosmo.service.impl.StandardServerPropertyService"
        init-method="init"
        destroy-method="destroy">
    <property name="serverPropertyDao">
      <ref bean="serverPropertyDao"/>
    </property>
  </bean>

  <!-- really a facade to the service layer -->

  <bean id="rpcService"
        class="org.osaf.cosmo.rpc.RPCServiceImpl">
    <property name="contentService">
      <ref bean="contentService"/>
    </property>
    <property name="userService">
      <ref bean="userService"/>
    </property>
    <property name="cosmoSecurityManager">
      <ref bean="securityManager"/>
    </property>
    <property name="serviceLocatorFactory">
      <ref bean="serviceLocatorFactory"/>
    </property>
  </bean>

  <!-- these beans are used to initialize the JSON-RPC service -->

  <bean id="JSONRPCBridge"
        class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="targetClass">
      <value>com.metaparadigm.jsonrpc.JSONRPCBridge</value>
    </property>
    <property name="targetMethod">
      <value>getGlobalBridge</value>
    </property>
  </bean>

  <bean id="registerWithJSON"
        class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="targetObject">
        <ref local="JSONRPCBridge"/>
    </property>
    <property name="targetMethod">
      <value>registerObject</value>
    </property>
    <property name="arguments">
      <list>
          <value>scoobyService</value>
          <ref local="rpcService"/>
          <value>org.osaf.cosmo.rpc.RPCService</value>
      </list>
    </property>
  </bean>

  <!-- general protocol/interface resources -->

  <bean id="serviceLocatorFactory"
        class="org.osaf.cosmo.server.ServiceLocatorFactory">
    <property name="atomPrefix"><value>/atom</value></property>
    <property name="cmpPrefix"><value>/cmp</value></property>
    <property name="davPrefix"><value>/dav</value></property>
    <property name="davPrincipalPrefix"><value>/dav</value></property>
    <property name="davCalendarHomePrefix"><value>/dav</value></property>
    <property name="morseCodePrefix"><value>/mc</value></property>
    <property name="pimPrefix"><value>/pim</value></property>
    <property name="webcalPrefix"><value>/webcal</value></property>
    <property name="securityManager">
      <ref bean="securityManager"/>
    </property>
  </bean>

  <!-- dav protocol resources -->

  <bean id="davLockManager"
        class="org.apache.jackrabbit.webdav.lock.SimpleLockManager"/>

  <bean id="davResourceFactory"
        class="org.osaf.cosmo.dav.impl.StandardDavResourceFactory">
    <property name="contentService">
      <ref local="contentService"/>
    </property>
    <property name="securityManager">
      <ref local="securityManager"/>
    </property>
  </bean>

  <bean id="davLocatorFactory"
        class="org.osaf.cosmo.dav.impl.StandardLocatorFactory">
    <constructor-arg>
      <value>/home</value>
    </constructor-arg>
    <constructor-arg>
      <value>/feed/atom/1.0</value>
    </constructor-arg>
    <constructor-arg>
      <value>/cmp</value>
    </constructor-arg>
    <constructor-arg>
      <value>/browse</value>
    </constructor-arg>
  </bean>

  <bean id="davSessionProvider"
        class="org.osaf.cosmo.dav.impl.NoOpDavSessionProvider"/>

  <!-- morse code protocol resources -->

  <bean id="morseCodeController"
        class="org.osaf.cosmo.mc.StandardMorseCodeController"
        init-method="init">
    <property name="contentService">
      <ref local="contentService"/>
    </property>
    <property name="securityManager">
      <ref local="securityManager"/>
    </property>
  </bean>

  <!-- a helper for setting up the database schema and loading seed
       data -->

  <bean id="dbInitializer"
        class="org.osaf.cosmo.db.DbInitializer">
    <property name="userService">
      <ref bean="userService"/>
    </property>
    <property name="serverPropertyService">
      <ref bean="serverPropertyService"/>
    </property>
    <property name="localSessionFactory">
      <ref bean="&amp;sessionFactory"/>
    </property>
    <property name="rootLoginUrl">
      <value>/account/view</value>
    </property>
    
  </bean>

  <!-- the servlet context configurer, which is used instead of
       spring's servlet context export mechanism because config
       information needs to be loaded from the database -->

  <bean id="servletContextConfigurer"
        class="org.osaf.cosmo.ui.config.ServletContextConfigurer">
    <property name="userService">
      <ref bean="userService"/>
    </property>
  </bean>

  <!-- authentication resources -->

  <bean id="userDetailsService"
        class="org.osaf.cosmo.acegisecurity.userdetails.CosmoUserDetailsService">
     <property name="userDao">
       <ref bean="userDao"/>
     </property>
  </bean>

  <bean id="passwordEncoder"
        class="org.acegisecurity.providers.encoding.Md5PasswordEncoder"/>

  <bean id="daoAuthenticationProvider"
        class="org.acegisecurity.providers.dao.DaoAuthenticationProvider">
    <property name="userDetailsService">
      <ref local="userDetailsService"/>
    </property>
    <property name="passwordEncoder">
      <ref local="passwordEncoder"/>
    </property>
  </bean>

  <bean id="anonymousAuthenticationProvider"
        class="org.acegisecurity.providers.anonymous.AnonymousAuthenticationProvider">
    <property name="key">
      <value>badgerbadgerbadger</value>
    </property>
  </bean>

  <bean id="ticketAuthenticationProvider"
        class="org.osaf.cosmo.acegisecurity.providers.ticket.TicketAuthenticationProvider">
    <property name="contentService">
      <ref bean="contentService"/>
    </property>
  </bean>

  <bean id="authenticationManager"
        class="org.acegisecurity.providers.ProviderManager">
    <property name="providers">
      <list>
        <ref local="daoAuthenticationProvider"/>
        <ref local="anonymousAuthenticationProvider"/>
        <ref local="ticketAuthenticationProvider"/>
      </list>
    </property>
  </bean>

  <!-- authorization resources -->

  <bean id="ticketVoter"
        class="org.osaf.cosmo.acegisecurity.providers.ticket.TicketVoter"/>

  <bean id="ownerVoter"
        class="org.osaf.cosmo.acegisecurity.providers.owner.OwnerVoter">
    <property name="contentService">
      <ref bean="contentService"/>
    </property>
  </bean>

  <bean id="roleVoter" class="org.acegisecurity.vote.RoleVoter"/>

  <bean id="defaultAccessDecisionManager"
        class="org.acegisecurity.vote.AffirmativeBased">
    <property name="allowIfAllAbstainDecisions">
      <value>false</value>
    </property>
    <property name="decisionVoters">
      <list>
        <ref bean="roleVoter"/>
      </list>
    </property>
  </bean>

  <!-- security facade resources -->

  <bean id="securityManager"
        class="org.osaf.cosmo.security.impl.CosmoSecurityManagerImpl">
    <property name="authenticationManager">
      <ref local="authenticationManager"/>
    </property>
  </bean>

  <bean id="defaultFilterInvocationInterceptor"
         class="org.acegisecurity.intercept.web.FilterSecurityInterceptor">
     <property name="authenticationManager">
       <ref bean="authenticationManager"/>
     </property>
     <property name="accessDecisionManager">
       <ref bean="defaultAccessDecisionManager"/>
     </property>
     <property name="objectDefinitionSource">
       <value>
     CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
     PATTERN_TYPE_APACHE_ANT
         /account/new=ROLE_ANONYMOUS
         /account/signup=ROLE_ANONYMOUS
         /account=ROLE_ROOT,ROLE_USER
         /account/view=ROLE_ROOT,ROLE_USER
         /account/update=ROLE_ROOT,ROLE_USER
         /account/activate/*=ROLE_ANONYMOUS, ROLE_USER, ROLE_ROOT
         /account/forgot=ROLE_ANONYMOUS
         /account/remind=ROLE_ANONYMOUS
         /login=ROLE_ANONYMOUS, ROLE_USER, ROLE_ROOT
         /security_check=ROLE_ANONYMOUS
         /loginfailed=ROLE_ANONYMOUS
         /logout=ROLE_ROOT,ROLE_USER
         /browse/**=ROLE_USER, ROLE_ROOT
         /admin/status/**=ROLE_ROOT
         /admin/user/**=ROLE_ROOT
         /error=ROLE_ANONYMOUS,ROLE_USER,ROLE_ROOT
         /error/**=ROLE_ANONYMOUS,ROLE_USER,ROLE_ROOT
         /help/about=ROLE_ROOT,ROLE_USER,ROLE_ANONYMOUS
         /help=ROLE_ROOT,ROLE_USER
         /help/**=ROLE_ROOT,ROLE_USER
         /**=ROLE_ROOT
       </value>
     </property>
   </bean>

   <!-- filter chain that kicks off request-time processing -->

   <bean id="defaultFilterChainProxy"
        class="org.acegisecurity.util.FilterChainProxy">
    <property name="filterInvocationDefinitionSource">
      <value>
        CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
        PATTERN_TYPE_APACHE_ANT
        /**=defaultHttpSessionContextIntegrationFilter,defaultAnonymousProcessingFilter,defaultExceptionTranslationFilter,defaultFilterInvocationInterceptor

      </value>
    </property>
  </bean>

   <bean id="webuiFilterChainProxy"
        class="org.acegisecurity.util.FilterChainProxy">
    <property name="filterInvocationDefinitionSource">
      <value>
        CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
        PATTERN_TYPE_APACHE_ANT
        /**=defaultHttpSessionContextIntegrationFilter,webuiFormBasedProcessingFilter,defaultExceptionTranslationFilter,defaultFilterInvocationInterceptor

      </value>
    </property>
  </bean>

  <!-- filter that integrates SecurityContext into HTTP Session -->

  <bean id="defaultHttpSessionContextIntegrationFilter"
        class="org.acegisecurity.context.HttpSessionContextIntegrationFilter"/>

  <!-- filter that performs form-based authentication -->

  <bean id="defaultFormBasedAuthenticationEntryPoint"
        class="org.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint">
    <property name="loginFormUrl">
      <value>/login</value>
    </property>
    <property name="forceHttps">
      <value>false</value>
    </property>
  </bean>

  <bean id="webuiFormBasedProcessingFilter"
        class="org.osaf.cosmo.acegisecurity.ui.webapp.CosmoAuthenticationProcessingFilter">
    <property name="authenticationManager">
      <ref bean="authenticationManager"/>
    </property>
    <property name="filterProcessesUrl">
      <value>/security_check</value>
    </property>
    <property name="authenticationFailureUrl">
      <value>/loginfailed</value>
    </property>
    <property name="cosmoDefaultLoginUrl">
      <value>/pim</value>
    </property>
    
  </bean>

  <!-- filter that performs anonymous authentication -->

  <bean id="defaultAnonymousProcessingFilter"
        class="org.acegisecurity.providers.anonymous.AnonymousProcessingFilter">
    <property name="key">
      <value>badgerbadgerbadger</value>
    </property>
    <property name="userAttribute">
      <value>anonymous,ROLE_ANONYMOUS</value>
    </property>
  </bean>

  <!-- filter that converts authen/authz exceptions to web pages -->

  <bean id="defaultExceptionTranslationFilter"
        class="org.acegisecurity.ui.ExceptionTranslationFilter">
    <property name="authenticationEntryPoint">
      <ref local="defaultFormBasedAuthenticationEntryPoint"/>
    </property>
  </bean>

  <!-- Logging resources -->
  <bean id="httpLoggingFormat" class="java.lang.String">
    <constructor-arg type="java.lang.String"><value>${cosmo.log.HttpLoggingFilter.format}</value></constructor-arg>
  </bean>

</beans>
