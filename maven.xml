<!--
   Copyright 2005 Open Source Applications Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<project xmlns:j="jelly:core" xmlns:ant="jelly:ant"
         xmlns:jackrabbit="jackrabbit">
  <goal name="build">
    <attainGoal name="war:webapp"/>
  </goal>

  <!-- not used in the standard build, but only for manually
  regenerating node type -->
  <goal name="build:nodetypes">
    <jackrabbit:generate
       catalog="${basedir}/src/docs/jcr/webdav.txt"
       descriptor="${maven.build.dir}/webdav_nodetypes.xml"/>
    <jackrabbit:generate
       catalog="${basedir}/src/docs/jcr/tickets.txt"
       descriptor="${maven.build.dir}/tickets_nodetypes.xml"/>
    <jackrabbit:generate
       catalog="${basedir}/src/docs/jcr/icalendar.txt"
       descriptor="${maven.build.dir}/icalendar_nodetypes.xml"/>
    <jackrabbit:generate
       catalog="${basedir}/src/docs/jcr/caldav.txt"
       descriptor="${maven.build.dir}/caldav_nodetypes.xml"/>
  </goal>

  <preGoal name="test:test-resources">
    <j:if test="${unitTestSourcesPresent == 'true' and context.getVariable('maven.test.skip') != 'true'}">
      <filter token="VERSION" value="${pom.currentVersion}"/>
      <filter token="SERVER_ADMIN" value="${cosmo.serverAdmin}"/>
      <filter token="REPOSITORY_USERNAME"
              value="${cosmo.test.repository.username}"/>
      <filter token="REPOSITORY_PASSWORD"
              value="${cosmo.test.repository.password}"/>
      <filter token="CONFIGFILEPATH"
              value="${basedir}/src/main/resources/server/repository.xml"/>
      <filter token="REPOSITORYHOMEDIRPATH"
              value="${maven.build.dir}/test-repository"/>
      <filter token="DIALECT" value="${cosmo.test.userdb.dialect}"/>
      <filter token="DRIVER" value="${cosmo.test.userdb.driver}"/>
      <filter token="DB_URL" value="${cosmo.test.userdb.url}"/>
      <filter token="DB_USERNAME"
              value="${cosmo.test.userdb.username}"/>
      <filter token="DB_PASSWORD"
              value="${cosmo.test.userdb.password}"/>
      <filter token="MAIL_TRANSPORT_PROTOCOL"
              value="${cosmo.test.mail.transport.protocol}"/>
      <filter token="MAIL_SMTP_HOST"
              value="${cosmo.test.mail.smtp.host}"/>
      <filter token="MAIL_SMTP_STARTTLS_ENABLE"
              value="${cosmo.test.mail.smtp.starttls.enable}"/>
      <filter token="MAIL_SMTPS_HOST"
              value="${cosmo.test.mail.smtps.host}"/>
    </j:if>
  </preGoal>

  <preGoal name="test:test-resources">
    <j:if test="${unitTestSourcesPresent == 'true' and context.getVariable('maven.test.skip') != 'true'}">
      <attainGoal name="test:dbsetup"/>
      <attainGoal name="test:reposetup"/>
    </j:if>
  </preGoal>

  <goal name="test:dbsetup">
    <echo>Setting up test db ${cosmo.test.userdb.url}</echo>
    <sql driver="${cosmo.test.userdb.driver}"
         url="${cosmo.test.userdb.url}"
         userid="${cosmo.test.userdb.username}"
         password="${cosmo.test.userdb.password}"
         src="${basedir}/src/main/resources/db/${cosmo.test.userdb.schema}">
      <classpath>
        <path refid="maven.dependency.classpath"/>
      </classpath>
    </sql>
  </goal>

  <goal name="test:reposetup">
    <delete dir="${maven.build.dir}/test-repository"/> 
    <echo>Setting up test repository</echo>
    <jackrabbit:import
       configFilePath="${basedir}/src/main/resources/server/repository.xml"
       repositoryHomedirPath="${maven.build.dir}/test-repository"
       username="${cosmo.test.repository.username}"
       password="${cosmo.test.repository.password}"
       descriptor="${basedir}/src/main/resources/jackrabbit/webdav_nodetypes.xml"/>
    <jackrabbit:import
       configFilePath="${basedir}/src/main/resources/server/repository.xml"
       repositoryHomedirPath="${maven.build.dir}/test-repository"
       username="${cosmo.test.repository.username}"
       password="${cosmo.test.repository.password}"
       descriptor="${basedir}/src/main/resources/jackrabbit/tickets_nodetypes.xml"/>
    <jackrabbit:import
       configFilePath="${basedir}/src/main/resources/server/repository.xml"
       repositoryHomedirPath="${maven.build.dir}/test-repository"
       username="${cosmo.test.repository.username}"
       password="${cosmo.test.repository.password}"
       descriptor="${basedir}/src/main/resources/jackrabbit/icalendar_nodetypes.xml"/>
    <jackrabbit:import
       configFilePath="${basedir}/src/main/resources/server/repository.xml"
       repositoryHomedirPath="${maven.build.dir}/test-repository"
       username="${cosmo.test.repository.username}"
       password="${cosmo.test.repository.password}"
       descriptor="${basedir}/src/main/resources/jackrabbit/caldav_nodetypes.xml"/>
  </goal>
    
  <goal name="dist:tomcat">
    <attainGoal name="java:prepare-filesystem"/>
    <get src="${ext.tomcat.url}"
         dest="${maven.build.dir}/${ext.tomcat.package}.tar.gz"
         usetimestamp="true"/>
    <untar src="${maven.build.dir}/${ext.tomcat.package}.tar.gz"
           dest="${maven.build.dir}" compression="gzip"/>
    <copy todir="${cosmo.dist.version}/tomcat">
      <fileset dir="${maven.build.dir}/${ext.tomcat.package}">
        <exclude name="**/conf/Catalina/localhost/*.xml"/>
        <exclude name="**/conf/server.xml"/>
      </fileset>
    </copy>
    <!-- XXX can't figure out the right pattern to use to not copy
         this dir in the first place -->
    <delete dir="${cosmo.dist.version}/tomcat/webapps"/>
    <mkdir dir="${cosmo.dist.version}/tomcat/webapps"/>
    <mkdir dir="${cosmo.dist.version}/tomcat/logs"/>
    <chmod perm="755">
      <fileset dir="${cosmo.dist.version}/tomcat/bin">
        <include name="*.sh"/>
      </fileset>
    </chmod>
  </goal>

  <goal name="dist:webapp">
    <attainGoal name="war:webapp"/>
    <copy todir="${cosmo.dist.version}/tomcat/webapps/${pom.artifactId}">
      <fileset dir="${maven.build.dir}/${pom.artifactId}"/>
    </copy>
  </goal>

  <goal name="dist:server">
    <mkdir dir="${cosmo.dist.version}/logs"/>
    <copy todir="${cosmo.dist.version}/bin"
          file="${basedir}/src/bin/cosmoctl"/>
    <chmod file="${cosmo.dist.version}/bin/cosmoctl" perm="755"/>
    <copy todir="${cosmo.dist.version}">
      <fileset dir="${basedir}/src/docs">
        <include name="*.txt"/>
      </fileset>
    </copy>
    <copy todir="${cosmo.dist.version}/docs/license">
      <fileset dir="${basedir}/src/docs/license"/>
    </copy>
    <copy todir="${cosmo.dist.version}/tomcat/conf"
          file="${basedir}/src/main/resources/server/server.xml"/>
    <copy todir="${cosmo.dist.version}/tomcat/conf/Catalina/localhost"
          file="${basedir}/src/main/resources/server/cosmo.xml">
      <filterset>
        <filter token="RELOADABLE" value="${cosmo.webapp.reloadable}"/>
        <filter token="VERSION" value="${pom.currentVersion}"/>
        <filter token="SERVER_ADMIN" value="${cosmo.serverAdmin}"/>
        <filter token="REPOSITORY_USERNAME"
                value="${cosmo.dist.repository.username}"/>
        <filter token="REPOSITORY_PASSWORD"
                value="${cosmo.dist.repository.password}"/>
        <filter token="DB_USERNAME" value="${cosmo.dist.userdb.username}"/>
        <filter token="DB_PASSWORD" value="${cosmo.dist.userdb.password}"/>
        <filter token="DB_DRIVER" value="${cosmo.dist.userdb.driver}"/>
        <filter token="DB_URL" value="${cosmo.dist.userdb.url}"/>
        <filter token="MAIL_TRANSPORT_PROTOCOL"
                value="${cosmo.dist.mail.transport.protocol}"/>
        <filter token="MAIL_SMTP_HOST"
                value="${cosmo.dist.mail.smtp.host}"/>
        <filter token="MAIL_SMTP_STARTTLS_ENABLE"
                value="${cosmo.dist.mail.smtp.starttls.enable}"/>
        <filter token="MAIL_SMTPS_HOST"
                value="${cosmo.dist.mail.smtps.host}"/>
      </filterset>
    </copy>
    <copy todir="${cosmo.dist.version}/etc"
          file="${basedir}/src/main/resources/server/repository.xml"/>
    <copy todir="${cosmo.dist.version}/tomcat/common/classes"
          file="${basedir}/src/main/resources/server/hibernate.properties">
      <filterset>
        <filter token="DIALECT" value="${cosmo.dist.userdb.dialect}"/>
      </filterset>
    </copy>
    <!-- needed for tomcat's own logging -->
    <copy todir="${cosmo.dist.version}/tomcat/common/classes"
          file="${basedir}/src/main/resources/server/log4j.xml"/>
    <copy todir="${cosmo.dist.version}/tomcat/common/lib">
      <fileset dir="${maven.build.dir}/${pom.artifactId}/WEB-INF/lib">
        <include name="commons-logging-*.jar"/>
        <include name="log4j-*.jar"/>
      </fileset>
    </copy>
    <!-- tomcat uses a different classloader to find these when
         setting up jndi resources -->
    <copy todir="${cosmo.dist.version}/tomcat/common/lib">
      <fileset dir="${maven.build.dir}/${pom.artifactId}/WEB-INF/lib">
        <include name="jcr-*.jar"/>
        <include name="mailapi-*.jar"/>
        <include name="activation-*.jar"/>
      </fileset>
    </copy>
    <copy todir="${cosmo.dist.version}/tomcat/common/lib"
          file="${cosmo.dist.userdb.jar}"/>
  </goal>

  <goal name="dist:db">
    <echo>Setting up db ${cosmo.dist.userdb.url}</echo>
    <sql driver="${cosmo.dist.userdb.driver}"
         url="${cosmo.dist.userdb.url}"
         userid="${cosmo.dist.userdb.username}"
         password="${cosmo.dist.userdb.password}"
         src="${basedir}/src/main/resources/db/${cosmo.dist.userdb.schema}">
      <classpath>
        <path refid="maven.dependency.classpath"/>
      </classpath>
    </sql>
    <move todir="${cosmo.dist.version}/data">
      <fileset dir="${basedir}/data"/>
    </move>
  </goal>

  <goal name="dist:repository">
    <delete dir="${cosmo.dist.version}/data/repository"/> 
    <echo>Initializing Jackrabbit repository</echo>
    <jackrabbit:import
       configFilePath="${basedir}/src/main/resources/server/repository.xml"
       repositoryHomedirPath="${cosmo.dist.version}/data/repository"
       username="${cosmo.dist.repository.username}"
       password="${cosmo.dist.repository.password}"
       descriptor="${basedir}/src/main/resources/jackrabbit/webdav_nodetypes.xml"/>
    <jackrabbit:import
       configFilePath="${basedir}/src/main/resources/server/repository.xml"
       repositoryHomedirPath="${cosmo.dist.version}/data/repository"
       username="${cosmo.dist.repository.username}"
       password="${cosmo.dist.repository.password}"
       descriptor="${basedir}/src/main/resources/jackrabbit/tickets_nodetypes.xml"/>
    <jackrabbit:import
       configFilePath="${basedir}/src/main/resources/server/repository.xml"
       repositoryHomedirPath="${cosmo.dist.version}/data/repository"
       username="${cosmo.dist.repository.username}"
       password="${cosmo.dist.repository.password}"
       descriptor="${basedir}/src/main/resources/jackrabbit/icalendar_nodetypes.xml"/>
    <jackrabbit:import
       configFilePath="${basedir}/src/main/resources/server/repository.xml"
       repositoryHomedirPath="${cosmo.dist.version}/data/repository"
       username="${cosmo.dist.repository.username}"
       password="${cosmo.dist.repository.password}"
       descriptor="${basedir}/src/main/resources/jackrabbit/caldav_nodetypes.xml"/>
  </goal>

  <goal name="dist:data">
    <attainGoal name="dist:db"/>
    <attainGoal name="dist:repository"/>
  </goal>

  <goal name="dist">
    <attainGoal name="dist:tomcat"/>
    <attainGoal name="dist:webapp"/>
    <attainGoal name="dist:server"/>
    <attainGoal name="dist:data"/>
  </goal>

  <goal name="dist:release">
    <attainGoal name="dist:clean"/>
    <attainGoal name="dist"/>
    <tar destfile="${cosmo.dist.version}.tar.gz"
         compression="gzip" longfile="gnu">
      <tarfileset dir="${cosmo.dist.version}" mode="755"
                  prefix="cosmo-${pom.currentVersion}">
        <include name="bin/cosmoctl"/>
        <include name="tomcat/bin/*.sh"/>
      </tarfileset>
      <tarfileset dir="${cosmo.dist.version}"
                  prefix="cosmo-${pom.currentVersion}">
        <exclude name="bin/cosmoctl"/>
        <exclude name="tomcat/bin/*.sh"/>
      </tarfileset>
    </tar>
  </goal>

  <goal name="dist:clean">
    <delete file="${cosmo.dist.version}.tar.gz"/>
    <delete dir="${cosmo.dist.version}"/>
  </goal>

  <goal name="dist:clean-data">
    <delete file="${cosmo.dist.version}/data"/>
  </goal>

</project>
